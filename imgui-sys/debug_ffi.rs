/* automatically generated by rust-bindgen */

pub use self::{ImGuiCol_ as ImGuiCol, ImGuiDataType_ as ImGuiDataType, ImGuiDir_ as ImGuiDir, ImGuiCond_ as ImGuiCond, ImGuiKey_ as ImGuiKey, ImGuiNavInput_ as ImGuiNavInput, ImGuiMouseCursor_ as ImGuiMouseCursor, ImGuiStyleVar_ as ImGuiStyleVar, ImDrawCornerFlags_ as ImDrawCornerFlags, ImDrawListFlags_ as ImDrawListFlags, ImFontAtlasFlags_ as ImFontAtlasFlags, ImGuiBackendFlags_ as ImGuiBackendFlags, ImGuiColorEditFlags_ as ImGuiColorEditFlags, ImGuiConfigFlags_ as ImGuiConfigFlags, ImGuiComboFlags_ as ImGuiComboFlags, ImGuiDragDropFlags_ as ImGuiDragDropFlags, ImGuiFocusedFlags_ as ImGuiFocusedFlags, ImGuiHoveredFlags_ as ImGuiHoveredFlags, ImGuiInputTextFlags_ as ImGuiInputTextFlags, ImGuiSelectableFlags_ as ImGuiSelectableFlags, ImGuiTreeNodeFlags_ as ImGuiTreeNodeFlags, ImGuiWindowFlags_ as ImGuiWindowFlags};

impl ImGuiCol {
    pub fn set(&mut self, flag: ImGuiCol, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiCol(!flag.0);
        }
    }
}

impl ImGuiDataType {
    pub fn set(&mut self, flag: ImGuiDataType, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiDataType(!flag.0);
        }
    }
}

impl ImGuiDir {
    pub fn set(&mut self, flag: ImGuiDir, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiDir(!flag.0);
        }
    }
}

impl ImGuiCond {
    pub fn set(&mut self, flag: ImGuiCond, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiCond(!flag.0);
        }
    }
}

impl ImGuiKey {
    pub fn set(&mut self, flag: ImGuiKey, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiKey(!flag.0);
        }
    }
}

impl ImGuiNavInput {
    pub fn set(&mut self, flag: ImGuiNavInput, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiNavInput(!flag.0);
        }
    }
}

impl ImGuiMouseCursor {
    pub fn set(&mut self, flag: ImGuiMouseCursor, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiMouseCursor(!flag.0);
        }
    }
}

impl ImGuiStyleVar {
    pub fn set(&mut self, flag: ImGuiStyleVar, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiStyleVar(!flag.0);
        }
    }
}

impl ImDrawCornerFlags {
    pub fn set(&mut self, flag: ImDrawCornerFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImDrawCornerFlags(!flag.0);
        }
    }
}

impl ImDrawListFlags {
    pub fn set(&mut self, flag: ImDrawListFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImDrawListFlags(!flag.0);
        }
    }
}

impl ImFontAtlasFlags {
    pub fn set(&mut self, flag: ImFontAtlasFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImFontAtlasFlags(!flag.0);
        }
    }
}

impl ImGuiBackendFlags {
    pub fn set(&mut self, flag: ImGuiBackendFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiBackendFlags(!flag.0);
        }
    }
}

impl ImGuiColorEditFlags {
    pub fn set(&mut self, flag: ImGuiColorEditFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiColorEditFlags(!flag.0);
        }
    }
}

impl ImGuiConfigFlags {
    pub fn set(&mut self, flag: ImGuiConfigFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiConfigFlags(!flag.0);
        }
    }
}

impl ImGuiComboFlags {
    pub fn set(&mut self, flag: ImGuiComboFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiComboFlags(!flag.0);
        }
    }
}

impl ImGuiDragDropFlags {
    pub fn set(&mut self, flag: ImGuiDragDropFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiDragDropFlags(!flag.0);
        }
    }
}

impl ImGuiFocusedFlags {
    pub fn set(&mut self, flag: ImGuiFocusedFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiFocusedFlags(!flag.0);
        }
    }
}

impl ImGuiHoveredFlags {
    pub fn set(&mut self, flag: ImGuiHoveredFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiHoveredFlags(!flag.0);
        }
    }
}

impl ImGuiInputTextFlags {
    pub fn set(&mut self, flag: ImGuiInputTextFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiInputTextFlags(!flag.0);
        }
    }
}

impl ImGuiSelectableFlags {
    pub fn set(&mut self, flag: ImGuiSelectableFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiSelectableFlags(!flag.0);
        }
    }
}

impl ImGuiTreeNodeFlags {
    pub fn set(&mut self, flag: ImGuiTreeNodeFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiTreeNodeFlags(!flag.0);
        }
    }
}

impl ImGuiWindowFlags {
    pub fn set(&mut self, flag: ImGuiWindowFlags, active: bool) {
        if active {
            *self |= flag;
        } else {
            *self &= ImGuiWindowFlags(!flag.0);
        }
    }
}


pub const IMGUI_DISABLE_OBSOLETE_FUNCTIONS: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const IMGUI_VERSION: &'static [u8; 5usize] = b"1.62\0";
pub const _ASSERT_H: u32 = 1;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &'static [u8; 7usize] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &'static [u8; 7usize] = b"_COL4F\0";
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;

pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;

extern "C" { pub fn memcpy(__dest: *mut ::std::os::raw::c_void, __src: *const ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn memmove(__dest: *mut ::std::os::raw::c_void, __src: *const ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn memccpy(__dest: *mut ::std::os::raw::c_void, __src: *const ::std::os::raw::c_void, __c: ::std::os::raw::c_int, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn memset(__s: *mut ::std::os::raw::c_void, __c: ::std::os::raw::c_int, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn memcmp(__s1: *const ::std::os::raw::c_void, __s2: *const ::std::os::raw::c_void, __n: usize) -> ::std::os::raw::c_int; }

extern "C" { pub fn memchr(__s: *const ::std::os::raw::c_void, __c: ::std::os::raw::c_int, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn rawmemchr(__s: *const ::std::os::raw::c_void, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn memrchr(__s: *const ::std::os::raw::c_void, __c: ::std::os::raw::c_int, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn strcpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strncpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strcat(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strncat(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strcmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int; }

extern "C" { pub fn strncmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int; }

extern "C" { pub fn strcoll(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int; }

extern "C" { pub fn strxfrm(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize) -> usize; }

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct __locale_struct { pub __locales: [*mut __locale_data; 13usize], pub __ctype_b: *const ::std::os::raw::c_ushort, pub __ctype_tolower: *const ::std::os::raw::c_int, pub __ctype_toupper: *const ::std::os::raw::c_int, pub __names: [*const ::std::os::raw::c_char; 13usize] }

#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>(), 232usize, concat!( "Size of: " , stringify ! ( __locale_struct ) ));
    assert_eq!(::std::mem::align_of::<__locale_struct>(), 8usize, concat!( "Alignment of " , stringify ! ( __locale_struct ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __locales ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize }, 104usize, concat!( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_b ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize }, 112usize, concat!( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_tolower ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize }, 120usize, concat!( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_toupper ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize }, 128usize, concat!( "Offset of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __names ) ));
}

pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;

extern "C" { pub fn strcoll_l(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char, __l: locale_t) -> ::std::os::raw::c_int; }

extern "C" { pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize, __l: locale_t) -> usize; }

extern "C" { pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strrchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strchrnul(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strcspn(__s: *const ::std::os::raw::c_char, __reject: *const ::std::os::raw::c_char) -> usize; }

extern "C" { pub fn strspn(__s: *const ::std::os::raw::c_char, __accept: *const ::std::os::raw::c_char) -> usize; }

extern "C" { pub fn strpbrk(__s: *const ::std::os::raw::c_char, __accept: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strstr(__haystack: *const ::std::os::raw::c_char, __needle: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strtok(__s: *mut ::std::os::raw::c_char, __delim: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn __strtok_r(__s: *mut ::std::os::raw::c_char, __delim: *const ::std::os::raw::c_char, __save_ptr: *mut *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strtok_r(__s: *mut ::std::os::raw::c_char, __delim: *const ::std::os::raw::c_char, __save_ptr: *mut *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strcasestr(__haystack: *const ::std::os::raw::c_char, __needle: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn memmem(__haystack: *const ::std::os::raw::c_void, __haystacklen: usize, __needle: *const ::std::os::raw::c_void, __needlelen: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn __mempcpy(__dest: *mut ::std::os::raw::c_void, __src: *const ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn mempcpy(__dest: *mut ::std::os::raw::c_void, __src: *const ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize; }

extern "C" { pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize; }

extern "C" { pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strerror_r(__errnum: ::std::os::raw::c_int, __buf: *mut ::std::os::raw::c_char, __buflen: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: locale_t) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn bcmp(__s1: *const ::std::os::raw::c_void, __s2: *const ::std::os::raw::c_void, __n: usize) -> ::std::os::raw::c_int; }

extern "C" { pub fn bcopy(__src: *const ::std::os::raw::c_void, __dest: *mut ::std::os::raw::c_void, __n: usize); }

extern "C" { pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize); }

extern "C" { pub fn index(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn rindex(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int; }

extern "C" { pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int; }

extern "C" { pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int; }

extern "C" { pub fn strcasecmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int; }

extern "C" { pub fn strncasecmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int; }

extern "C" { pub fn strcasecmp_l(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char, __loc: locale_t) -> ::std::os::raw::c_int; }

extern "C" { pub fn strncasecmp_l(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char, __n: usize, __loc: locale_t) -> ::std::os::raw::c_int; }

extern "C" { pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize); }

extern "C" { pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char, __delim: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn stpcpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn stpncpy(__dest: *mut ::std::os::raw::c_char, __src: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn strverscmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int; }

extern "C" { pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void; }

extern "C" { pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char; }

extern "C" { pub fn __assert_fail(__assertion: *const ::std::os::raw::c_char, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_uint, __function: *const ::std::os::raw::c_char); }

extern "C" { pub fn __assert_perror_fail(__errnum: ::std::os::raw::c_int, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_uint, __function: *const ::std::os::raw::c_char); }

extern "C" { pub fn __assert(__assertion: *const ::std::os::raw::c_char, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_int); }

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData { _unused: [u8; 0] }

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext { _unused: [u8; 0] }

pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImWchar = ::std::os::raw::c_ushort;
pub type ImGuiColumnsFlags = ::std::os::raw::c_int;
pub type ImGuiTextEditCallback = ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiTextEditCallbackData) -> ::std::os::raw::c_int>;
pub type ImGuiSizeCallback = ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImVec2 { pub x: f32, pub y: f32 }

#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(::std::mem::size_of::<ImVec2>(), 8usize, concat!( "Size of: " , stringify ! ( ImVec2 ) ));
    assert_eq!(::std::mem::align_of::<ImVec2>(), 4usize, concat!( "Alignment of " , stringify ! ( ImVec2 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImVec2 ) , "::" , stringify ! ( x ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImVec2 ) , "::" , stringify ! ( y ) ));
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImVec4 { pub x: f32, pub y: f32, pub z: f32, pub w: f32 }

#[test]
fn bindgen_test_layout_ImVec4() {
    assert_eq!(::std::mem::size_of::<ImVec4>(), 16usize, concat!( "Size of: " , stringify ! ( ImVec4 ) ));
    assert_eq!(::std::mem::align_of::<ImVec4>(), 4usize, concat!( "Alignment of " , stringify ! ( ImVec4 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec4>())).x as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( x ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec4>())).y as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( y ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec4>())).z as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( z ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImVec4>())).w as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImVec4 ) , "::" , stringify ! ( w ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CreateContextEP11ImFontAtlas"]
    pub fn CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14DestroyContextEP12ImGuiContext"]
    pub fn DestroyContext(ctx: *mut ImGuiContext);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetCurrentContextEv"]
    pub fn GetCurrentContext() -> *mut ImGuiContext;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetCurrentContextEP12ImGuiContext"]
    pub fn SetCurrentContext(ctx: *mut ImGuiContext);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmm"]
    pub fn DebugCheckVersionAndDataLayout(version_str: *const ::std::os::raw::c_char, sz_io: usize, sz_style: usize, sz_vec2: usize, sz_vec4: usize, sz_drawvert: usize) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIOEv"]
    pub fn GetIO() -> *mut ImGuiIO;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8GetStyleEv"]
    pub fn GetStyle() -> *mut ImGuiStyle;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8NewFrameEv"]
    pub fn NewFrame();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndFrameEv"]
    pub fn EndFrame();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6RenderEv"]
    pub fn Render();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetDrawDataEv"]
    pub fn GetDrawData() -> *mut ImDrawData;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14ShowDemoWindowEPb"]
    pub fn ShowDemoWindow(p_open: *mut bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17ShowMetricsWindowEPb"]
    pub fn ShowMetricsWindow(p_open: *mut bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15ShowStyleEditorEP10ImGuiStyle"]
    pub fn ShowStyleEditor(ref_: *mut ImGuiStyle);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17ShowStyleSelectorEPKc"]
    pub fn ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16ShowFontSelectorEPKc"]
    pub fn ShowFontSelector(label: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ShowUserGuideEv"]
    pub fn ShowUserGuide();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetVersionEv"]
    pub fn GetVersion() -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15StyleColorsDarkEP10ImGuiStyle"]
    pub fn StyleColorsDark(dst: *mut ImGuiStyle);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18StyleColorsClassicEP10ImGuiStyle"]
    pub fn StyleColorsClassic(dst: *mut ImGuiStyle);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16StyleColorsLightEP10ImGuiStyle"]
    pub fn StyleColorsLight(dst: *mut ImGuiStyle);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5BeginEPKcPbi"]
    pub fn Begin(name: *const ::std::os::raw::c_char, p_open: *mut bool, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui3EndEv"]
    pub fn End();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginChildEPKcRK6ImVec2bi"]
    pub fn BeginChild(str_id: *const ::std::os::raw::c_char, size: *const ImVec2, border: bool, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginChildEjRK6ImVec2bi"]
    pub fn BeginChild1(id: ImGuiID, size: *const ImVec2, border: bool, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndChildEv"]
    pub fn EndChild();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsWindowAppearingEv"]
    pub fn IsWindowAppearing() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsWindowCollapsedEv"]
    pub fn IsWindowCollapsed() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsWindowFocusedEi"]
    pub fn IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsWindowHoveredEi"]
    pub fn IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetWindowDrawListEv"]
    pub fn GetWindowDrawList() -> *mut ImDrawList;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetWindowPosEv"]
    pub fn GetWindowPos() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetWindowSizeEv"]
    pub fn GetWindowSize() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetWindowWidthEv"]
    pub fn GetWindowWidth() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetWindowHeightEv"]
    pub fn GetWindowHeight() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19GetContentRegionMaxEv"]
    pub fn GetContentRegionMax() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetContentRegionAvailEv"]
    pub fn GetContentRegionAvail() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26GetContentRegionAvailWidthEv"]
    pub fn GetContentRegionAvailWidth() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetWindowContentRegionMinEv"]
    pub fn GetWindowContentRegionMin() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetWindowContentRegionMaxEv"]
    pub fn GetWindowContentRegionMax() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27GetWindowContentRegionWidthEv"]
    pub fn GetWindowContentRegionWidth() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_"]
    pub fn SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetNextWindowSizeERK6ImVec2i"]
    pub fn SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv"]
    pub fn SetNextWindowSizeConstraints(size_min: *const ImVec2, size_max: *const ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: *mut ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2"]
    pub fn SetNextWindowContentSize(size: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22SetNextWindowCollapsedEbi"]
    pub fn SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetNextWindowFocusEv"]
    pub fn SetNextWindowFocus();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetNextWindowBgAlphaEf"]
    pub fn SetNextWindowBgAlpha(alpha: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetWindowPosERK6ImVec2i"]
    pub fn SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowSizeERK6ImVec2i"]
    pub fn SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowCollapsedEbi"]
    pub fn SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetWindowFocusEv"]
    pub fn SetWindowFocus();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowFontScaleEf"]
    pub fn SetWindowFontScale(scale: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i"]
    pub fn SetWindowPos1(name: *const ::std::os::raw::c_char, pos: *const ImVec2, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i"]
    pub fn SetWindowSize1(name: *const ::std::os::raw::c_char, size: *const ImVec2, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowCollapsedEPKcbi"]
    pub fn SetWindowCollapsed1(name: *const ::std::os::raw::c_char, collapsed: bool, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetWindowFocusEPKc"]
    pub fn SetWindowFocus1(name: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetScrollXEv"]
    pub fn GetScrollX() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetScrollYEv"]
    pub fn GetScrollY() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetScrollMaxXEv"]
    pub fn GetScrollMaxX() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetScrollMaxYEv"]
    pub fn GetScrollMaxY() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollXEf"]
    pub fn SetScrollX(scroll_x: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollYEf"]
    pub fn SetScrollY(scroll_y: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetScrollHereEf"]
    pub fn SetScrollHere(center_y_ratio: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetScrollFromPosYEff"]
    pub fn SetScrollFromPosY(pos_y: f32, center_y_ratio: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8PushFontEP6ImFont"]
    pub fn PushFont(font: *mut ImFont);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7PopFontEv"]
    pub fn PopFont();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushStyleColorEij"]
    pub fn PushStyleColor(idx: ImGuiCol, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushStyleColorEiRK6ImVec4"]
    pub fn PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PopStyleColorEi"]
    pub fn PopStyleColor(count: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushStyleVarEif"]
    pub fn PushStyleVar(idx: ImGuiStyleVar, val: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushStyleVarEiRK6ImVec2"]
    pub fn PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11PopStyleVarEi"]
    pub fn PopStyleVar(count: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetStyleColorVec4Ei"]
    pub fn GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7GetFontEv"]
    pub fn GetFont() -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetFontSizeEv"]
    pub fn GetFontSize() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetFontTexUvWhitePixelEv"]
    pub fn GetFontTexUvWhitePixel() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32Eif"]
    pub fn GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32ERK6ImVec4"]
    pub fn GetColorU321(col: *const ImVec4) -> ImU32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32Ej"]
    pub fn GetColorU322(col: ImU32) -> ImU32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PushItemWidthEf"]
    pub fn PushItemWidth(item_width: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PopItemWidthEv"]
    pub fn PopItemWidth();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CalcItemWidthEv"]
    pub fn CalcItemWidth() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15PushTextWrapPosEf"]
    pub fn PushTextWrapPos(wrap_pos_x: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PopTextWrapPosEv"]
    pub fn PopTextWrapPos();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22PushAllowKeyboardFocusEb"]
    pub fn PushAllowKeyboardFocus(allow_keyboard_focus: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21PopAllowKeyboardFocusEv"]
    pub fn PopAllowKeyboardFocus();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16PushButtonRepeatEb"]
    pub fn PushButtonRepeat(repeat: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15PopButtonRepeatEv"]
    pub fn PopButtonRepeat();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9SeparatorEv"]
    pub fn Separator();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8SameLineEff"]
    pub fn SameLine(pos_x: f32, spacing_w: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7NewLineEv"]
    pub fn NewLine();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7SpacingEv"]
    pub fn Spacing();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5DummyERK6ImVec2"]
    pub fn Dummy(size: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6IndentEf"]
    pub fn Indent(indent_w: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8UnindentEf"]
    pub fn Unindent(indent_w: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginGroupEv"]
    pub fn BeginGroup();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndGroupEv"]
    pub fn EndGroup();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetCursorPosEv"]
    pub fn GetCursorPos() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetCursorPosXEv"]
    pub fn GetCursorPosX() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetCursorPosYEv"]
    pub fn GetCursorPosY() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetCursorPosERK6ImVec2"]
    pub fn SetCursorPos(local_pos: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetCursorPosXEf"]
    pub fn SetCursorPosX(x: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetCursorPosYEf"]
    pub fn SetCursorPosY(y: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetCursorStartPosEv"]
    pub fn GetCursorStartPos() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18GetCursorScreenPosEv"]
    pub fn GetCursorScreenPos() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetCursorScreenPosERK6ImVec2"]
    pub fn SetCursorScreenPos(screen_pos: *const ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23AlignTextToFramePaddingEv"]
    pub fn AlignTextToFramePadding();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetTextLineHeightEv"]
    pub fn GetTextLineHeight() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28GetTextLineHeightWithSpacingEv"]
    pub fn GetTextLineHeightWithSpacing() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetFrameHeightEv"]
    pub fn GetFrameHeight() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetFrameHeightWithSpacingEv"]
    pub fn GetFrameHeightWithSpacing() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKc"]
    pub fn PushID(str_id: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKcS1_"]
    pub fn PushID1(str_id_begin: *const ::std::os::raw::c_char, str_id_end: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKv"]
    pub fn PushID2(ptr_id: *const ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEi"]
    pub fn PushID3(int_id: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5PopIDEv"]
    pub fn PopID();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKc"]
    pub fn GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKcS1_"]
    pub fn GetID1(str_id_begin: *const ::std::os::raw::c_char, str_id_end: *const ::std::os::raw::c_char) -> ImGuiID;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKv"]
    pub fn GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TextUnformattedEPKcS1_"]
    pub fn TextUnformatted(text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui4TextEPKcz"]
    pub fn Text(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5TextVEPKcP13__va_list_tag"]
    pub fn TextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TextColoredERK6ImVec4PKcz"]
    pub fn TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextColoredVERK6ImVec4PKcP13__va_list_tag"]
    pub fn TextColoredV(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextDisabledEPKcz"]
    pub fn TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TextDisabledVEPKcP13__va_list_tag"]
    pub fn TextDisabledV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TextWrappedEPKcz"]
    pub fn TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextWrappedVEPKcP13__va_list_tag"]
    pub fn TextWrappedV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LabelTextEPKcS1_z"]
    pub fn LabelText(label: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10LabelTextVEPKcS1_P13__va_list_tag"]
    pub fn LabelTextV(label: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BulletTextEPKcz"]
    pub fn BulletText(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11BulletTextVEPKcP13__va_list_tag"]
    pub fn BulletTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6ButtonEPKcRK6ImVec2"]
    pub fn Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SmallButtonEPKc"]
    pub fn SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15InvisibleButtonEPKcRK6ImVec2"]
    pub fn InvisibleButton(str_id: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ArrowButtonEPKci"]
    pub fn ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ImageEPvRK6ImVec2S3_S3_RK6ImVec4S6_"]
    pub fn Image(user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, tint_col: *const ImVec4, border_col: *const ImVec4);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ImageButtonEPvRK6ImVec2S3_S3_iRK6ImVec4S6_"]
    pub fn ImageButton(user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, frame_padding: ::std::os::raw::c_int, bg_col: *const ImVec4, tint_col: *const ImVec4) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8CheckboxEPKcPb"]
    pub fn Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CheckboxFlagsEPKcPjj"]
    pub fn CheckboxFlags(label: *const ::std::os::raw::c_char, flags: *mut ::std::os::raw::c_uint, flags_value: ::std::os::raw::c_uint) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RadioButtonEPKcb"]
    pub fn RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RadioButtonEPKcPii"]
    pub fn RadioButton1(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i"]
    pub fn PlotLines(label: *const ::std::os::raw::c_char, values: *const f32, values_count: ::std::os::raw::c_int, values_offset: ::std::os::raw::c_int, overlay_text: *const ::std::os::raw::c_char, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn PlotLines1(label: *const ::std::os::raw::c_char, values_getter: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, idx: ::std::os::raw::c_int) -> f32>, data: *mut ::std::os::raw::c_void, values_count: ::std::os::raw::c_int, values_offset: ::std::os::raw::c_int, overlay_text: *const ::std::os::raw::c_char, scale_min: f32, scale_max: f32, graph_size: ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i"]
    pub fn PlotHistogram(label: *const ::std::os::raw::c_char, values: *const f32, values_count: ::std::os::raw::c_int, values_offset: ::std::os::raw::c_int, overlay_text: *const ::std::os::raw::c_char, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn PlotHistogram1(label: *const ::std::os::raw::c_char, values_getter: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, idx: ::std::os::raw::c_int) -> f32>, data: *mut ::std::os::raw::c_void, values_count: ::std::os::raw::c_int, values_offset: ::std::os::raw::c_int, overlay_text: *const ::std::os::raw::c_char, scale_min: f32, scale_max: f32, graph_size: ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ProgressBarEfRK6ImVec2PKc"]
    pub fn ProgressBar(fraction: f32, size_arg: *const ImVec2, overlay: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6BulletEv"]
    pub fn Bullet();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginComboEPKcS1_i"]
    pub fn BeginCombo(label: *const ::std::os::raw::c_char, preview_value: *const ::std::os::raw::c_char, flags: ImGuiComboFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndComboEv"]
    pub fn EndCombo();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiPKS1_ii"]
    pub fn Combo(label: *const ::std::os::raw::c_char, current_item: *mut ::std::os::raw::c_int, items: *const *const ::std::os::raw::c_char, items_count: ::std::os::raw::c_int, popup_max_height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiS1_i"]
    pub fn Combo1(label: *const ::std::os::raw::c_char, current_item: *mut ::std::os::raw::c_int, items_separated_by_zeros: *const ::std::os::raw::c_char, popup_max_height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii"]
    pub fn Combo2(label: *const ::std::os::raw::c_char, current_item: *mut ::std::os::raw::c_int, items_getter: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, idx: ::std::os::raw::c_int, out_text: *mut *const ::std::os::raw::c_char) -> bool>, data: *mut ::std::os::raw::c_void, items_count: ::std::os::raw::c_int, popup_max_height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9DragFloatEPKcPffffS1_f"]
    pub fn DragFloat(label: *const ::std::os::raw::c_char, v: *mut f32, v_speed: f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat2EPKcPffffS1_f"]
    pub fn DragFloat2(label: *const ::std::os::raw::c_char, v: *mut f32, v_speed: f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat3EPKcPffffS1_f"]
    pub fn DragFloat3(label: *const ::std::os::raw::c_char, v: *mut f32, v_speed: f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat4EPKcPffffS1_f"]
    pub fn DragFloat4(label: *const ::std::os::raw::c_char, v: *mut f32, v_speed: f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_f"]
    pub fn DragFloatRange2(label: *const ::std::os::raw::c_char, v_current_min: *mut f32, v_current_max: *mut f32, v_speed: f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, format_max: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7DragIntEPKcPifiiS1_"]
    pub fn DragInt(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_speed: f32, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt2EPKcPifiiS1_"]
    pub fn DragInt2(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_speed: f32, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt3EPKcPifiiS1_"]
    pub fn DragInt3(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_speed: f32, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt4EPKcPifiiS1_"]
    pub fn DragInt4(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_speed: f32, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_"]
    pub fn DragIntRange2(label: *const ::std::os::raw::c_char, v_current_min: *mut ::std::os::raw::c_int, v_current_max: *mut ::std::os::raw::c_int, v_speed: f32, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char, format_max: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_f"]
    pub fn DragScalar(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, v_speed: f32, v_min: *const ::std::os::raw::c_void, v_max: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_f"]
    pub fn DragScalarN(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, components: ::std::os::raw::c_int, v_speed: f32, v_min: *const ::std::os::raw::c_void, v_max: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputTextEPKcPcmiPFiP25ImGuiTextEditCallbackDataEPv"]
    pub fn InputText(label: *const ::std::os::raw::c_char, buf: *mut ::std::os::raw::c_char, buf_size: usize, flags: ImGuiInputTextFlags, callback: ImGuiTextEditCallback, user_data: *mut ::std::os::raw::c_void) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18InputTextMultilineEPKcPcmRK6ImVec2iPFiP25ImGuiTextEditCallbackDataEPv"]
    pub fn InputTextMultiline(label: *const ::std::os::raw::c_char, buf: *mut ::std::os::raw::c_char, buf_size: usize, size: *const ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiTextEditCallback, user_data: *mut ::std::os::raw::c_void) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10InputFloatEPKcPfffS1_i"]
    pub fn InputFloat(label: *const ::std::os::raw::c_char, v: *mut f32, step: f32, step_fast: f32, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat2EPKcPfS1_i"]
    pub fn InputFloat2(label: *const ::std::os::raw::c_char, v: *mut f32, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat3EPKcPfS1_i"]
    pub fn InputFloat3(label: *const ::std::os::raw::c_char, v: *mut f32, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat4EPKcPfS1_i"]
    pub fn InputFloat4(label: *const ::std::os::raw::c_char, v: *mut f32, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8InputIntEPKcPiiii"]
    pub fn InputInt(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, step: ::std::os::raw::c_int, step_fast: ::std::os::raw::c_int, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt2EPKcPii"]
    pub fn InputInt2(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt3EPKcPii"]
    pub fn InputInt3(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt4EPKcPii"]
    pub fn InputInt4(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputDoubleEPKcPdddS1_i"]
    pub fn InputDouble(label: *const ::std::os::raw::c_char, v: *mut f64, step: f64, step_fast: f64, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i"]
    pub fn InputScalar(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, step: *const ::std::os::raw::c_void, step_fast: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i"]
    pub fn InputScalarN(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, components: ::std::os::raw::c_int, step: *const ::std::os::raw::c_void, step_fast: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, extra_flags: ImGuiInputTextFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SliderFloatEPKcPfffS1_f"]
    pub fn SliderFloat(label: *const ::std::os::raw::c_char, v: *mut f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat2EPKcPfffS1_f"]
    pub fn SliderFloat2(label: *const ::std::os::raw::c_char, v: *mut f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat3EPKcPfffS1_f"]
    pub fn SliderFloat3(label: *const ::std::os::raw::c_char, v: *mut f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat4EPKcPfffS1_f"]
    pub fn SliderFloat4(label: *const ::std::os::raw::c_char, v: *mut f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SliderAngleEPKcPfff"]
    pub fn SliderAngle(label: *const ::std::os::raw::c_char, v_rad: *mut f32, v_degrees_min: f32, v_degrees_max: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9SliderIntEPKcPiiiS1_"]
    pub fn SliderInt(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt2EPKcPiiiS1_"]
    pub fn SliderInt2(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt3EPKcPiiiS1_"]
    pub fn SliderInt3(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt4EPKcPiiiS1_"]
    pub fn SliderInt4(label: *const ::std::os::raw::c_char, v: *mut ::std::os::raw::c_int, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_f"]
    pub fn SliderScalar(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, v_min: *const ::std::os::raw::c_void, v_max: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_f"]
    pub fn SliderScalarN(label: *const ::std::os::raw::c_char, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, components: ::std::os::raw::c_int, v_min: *const ::std::os::raw::c_void, v_max: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_f"]
    pub fn VSliderFloat(label: *const ::std::os::raw::c_char, size: *const ImVec2, v: *mut f32, v_min: f32, v_max: f32, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_"]
    pub fn VSliderInt(label: *const ::std::os::raw::c_char, size: *const ImVec2, v: *mut ::std::os::raw::c_int, v_min: ::std::os::raw::c_int, v_max: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_f"]
    pub fn VSliderScalar(label: *const ::std::os::raw::c_char, size: *const ImVec2, data_type: ImGuiDataType, v: *mut ::std::os::raw::c_void, v_min: *const ::std::os::raw::c_void, v_max: *const ::std::os::raw::c_void, format: *const ::std::os::raw::c_char, power: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10ColorEdit3EPKcPfi"]
    pub fn ColorEdit3(label: *const ::std::os::raw::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10ColorEdit4EPKcPfi"]
    pub fn ColorEdit4(label: *const ::std::os::raw::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ColorPicker3EPKcPfi"]
    pub fn ColorPicker3(label: *const ::std::os::raw::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ColorPicker4EPKcPfiPKf"]
    pub fn ColorPicker4(label: *const ::std::os::raw::c_char, col: *mut f32, flags: ImGuiColorEditFlags, ref_col: *const f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ColorButtonEPKcRK6ImVec4i6ImVec2"]
    pub fn ColorButton(desc_id: *const ::std::os::raw::c_char, col: *const ImVec4, flags: ImGuiColorEditFlags, size: ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetColorEditOptionsEi"]
    pub fn SetColorEditOptions(flags: ImGuiColorEditFlags);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKc"]
    pub fn TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKcS1_z"]
    pub fn TreeNode1(str_id: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKvPKcz"]
    pub fn TreeNode2(ptr_id: *const ::std::os::raw::c_void, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9TreeNodeVEPKcS1_P13__va_list_tag"]
    pub fn TreeNodeV(str_id: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9TreeNodeVEPKvPKcP13__va_list_tag"]
    pub fn TreeNodeV1(ptr_id: *const ::std::os::raw::c_void, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKci"]
    pub fn TreeNodeEx(label: *const ::std::os::raw::c_char, flags: ImGuiTreeNodeFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKciS1_z"]
    pub fn TreeNodeEx1(str_id: *const ::std::os::raw::c_char, flags: ImGuiTreeNodeFlags, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKviPKcz"]
    pub fn TreeNodeEx2(ptr_id: *const ::std::os::raw::c_void, flags: ImGuiTreeNodeFlags, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TreeNodeExVEPKciS1_P13__va_list_tag"]
    pub fn TreeNodeExV(str_id: *const ::std::os::raw::c_char, flags: ImGuiTreeNodeFlags, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TreeNodeExVEPKviPKcP13__va_list_tag"]
    pub fn TreeNodeExV1(ptr_id: *const ::std::os::raw::c_void, flags: ImGuiTreeNodeFlags, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreePushEPKc"]
    pub fn TreePush(str_id: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreePushEPKv"]
    pub fn TreePush1(ptr_id: *const ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7TreePopEv"]
    pub fn TreePop();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TreeAdvanceToLabelPosEv"]
    pub fn TreeAdvanceToLabelPos();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetTreeNodeToLabelSpacingEv"]
    pub fn GetTreeNodeToLabelSpacing() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetNextTreeNodeOpenEbi"]
    pub fn SetNextTreeNodeOpen(is_open: bool, cond: ImGuiCond);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CollapsingHeaderEPKci"]
    pub fn CollapsingHeader(label: *const ::std::os::raw::c_char, flags: ImGuiTreeNodeFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CollapsingHeaderEPKcPbi"]
    pub fn CollapsingHeader1(label: *const ::std::os::raw::c_char, p_open: *mut bool, flags: ImGuiTreeNodeFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SelectableEPKcbiRK6ImVec2"]
    pub fn Selectable(label: *const ::std::os::raw::c_char, selected: bool, flags: ImGuiSelectableFlags, size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SelectableEPKcPbiRK6ImVec2"]
    pub fn Selectable1(label: *const ::std::os::raw::c_char, p_selected: *mut bool, flags: ImGuiSelectableFlags, size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ListBoxEPKcPiPKS1_ii"]
    pub fn ListBox(label: *const ::std::os::raw::c_char, current_item: *mut ::std::os::raw::c_int, items: *const *const ::std::os::raw::c_char, items_count: ::std::os::raw::c_int, height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii"]
    pub fn ListBox1(label: *const ::std::os::raw::c_char, current_item: *mut ::std::os::raw::c_int, items_getter: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, idx: ::std::os::raw::c_int, out_text: *mut *const ::std::os::raw::c_char) -> bool>, data: *mut ::std::os::raw::c_void, items_count: ::std::os::raw::c_int, height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ListBoxHeaderEPKcRK6ImVec2"]
    pub fn ListBoxHeader(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ListBoxHeaderEPKcii"]
    pub fn ListBoxHeader1(label: *const ::std::os::raw::c_char, items_count: ::std::os::raw::c_int, height_in_items: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ListBoxFooterEv"]
    pub fn ListBoxFooter();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcb"]
    pub fn Value(prefix: *const ::std::os::raw::c_char, b: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKci"]
    pub fn Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcj"]
    pub fn Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcfS1_"]
    pub fn Value3(prefix: *const ::std::os::raw::c_char, v: f32, float_format: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginTooltipEv"]
    pub fn BeginTooltip();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndTooltipEv"]
    pub fn EndTooltip();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetTooltipEPKcz"]
    pub fn SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SetTooltipVEPKcP13__va_list_tag"]
    pub fn SetTooltipV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16BeginMainMenuBarEv"]
    pub fn BeginMainMenuBar() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14EndMainMenuBarEv"]
    pub fn EndMainMenuBar();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginMenuBarEv"]
    pub fn BeginMenuBar() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndMenuBarEv"]
    pub fn EndMenuBar();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9BeginMenuEPKcb"]
    pub fn BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7EndMenuEv"]
    pub fn EndMenu();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MenuItemEPKcS1_bb"]
    pub fn MenuItem(label: *const ::std::os::raw::c_char, shortcut: *const ::std::os::raw::c_char, selected: bool, enabled: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MenuItemEPKcS1_Pbb"]
    pub fn MenuItem1(label: *const ::std::os::raw::c_char, shortcut: *const ::std::os::raw::c_char, p_selected: *mut bool, enabled: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9OpenPopupEPKc"]
    pub fn OpenPopup(str_id: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginPopupEPKci"]
    pub fn BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21BeginPopupContextItemEPKci"]
    pub fn BeginPopupContextItem(str_id: *const ::std::os::raw::c_char, mouse_button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23BeginPopupContextWindowEPKcib"]
    pub fn BeginPopupContextWindow(str_id: *const ::std::os::raw::c_char, mouse_button: ::std::os::raw::c_int, also_over_items: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21BeginPopupContextVoidEPKci"]
    pub fn BeginPopupContextVoid(str_id: *const ::std::os::raw::c_char, mouse_button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15BeginPopupModalEPKcPbi"]
    pub fn BeginPopupModal(name: *const ::std::os::raw::c_char, p_open: *mut bool, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndPopupEv"]
    pub fn EndPopup();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20OpenPopupOnItemClickEPKci"]
    pub fn OpenPopupOnItemClick(str_id: *const ::std::os::raw::c_char, mouse_button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsPopupOpenEPKc"]
    pub fn IsPopupOpen(str_id: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17CloseCurrentPopupEv"]
    pub fn CloseCurrentPopup();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ColumnsEiPKcb"]
    pub fn Columns(count: ::std::os::raw::c_int, id: *const ::std::os::raw::c_char, border: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10NextColumnEv"]
    pub fn NextColumn();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetColumnIndexEv"]
    pub fn GetColumnIndex() -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetColumnWidthEi"]
    pub fn GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetColumnWidthEif"]
    pub fn SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetColumnOffsetEi"]
    pub fn GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetColumnOffsetEif"]
    pub fn SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetColumnsCountEv"]
    pub fn GetColumnsCount() -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8LogToTTYEi"]
    pub fn LogToTTY(max_depth: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LogToFileEiPKc"]
    pub fn LogToFile(max_depth: ::std::os::raw::c_int, filename: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14LogToClipboardEi"]
    pub fn LogToClipboard(max_depth: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LogFinishEv"]
    pub fn LogFinish();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10LogButtonsEv"]
    pub fn LogButtons();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7LogTextEPKcz"]
    pub fn LogText(fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19BeginDragDropSourceEi"]
    pub fn BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetDragDropPayloadEPKcPKvmi"]
    pub fn SetDragDropPayload(type_: *const ::std::os::raw::c_char, data: *const ::std::os::raw::c_void, size: usize, cond: ImGuiCond) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17EndDragDropSourceEv"]
    pub fn EndDragDropSource();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19BeginDragDropTargetEv"]
    pub fn BeginDragDropTarget() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21AcceptDragDropPayloadEPKci"]
    pub fn AcceptDragDropPayload(type_: *const ::std::os::raw::c_char, flags: ImGuiDragDropFlags) -> *const ImGuiPayload;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17EndDragDropTargetEv"]
    pub fn EndDragDropTarget();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushClipRectERK6ImVec2S2_b"]
    pub fn PushClipRect(clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11PopClipRectEv"]
    pub fn PopClipRect();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetItemDefaultFocusEv"]
    pub fn SetItemDefaultFocus();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetKeyboardFocusHereEi"]
    pub fn SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemHoveredEi"]
    pub fn IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsItemActiveEv"]
    pub fn IsItemActive() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemFocusedEv"]
    pub fn IsItemFocused() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemClickedEi"]
    pub fn IsItemClicked(mouse_button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemVisibleEv"]
    pub fn IsItemVisible() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsItemDeactivatedEv"]
    pub fn IsItemDeactivated() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28IsItemDeactivatedAfterChangeEv"]
    pub fn IsItemDeactivatedAfterChange() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16IsAnyItemHoveredEv"]
    pub fn IsAnyItemHovered() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsAnyItemActiveEv"]
    pub fn IsAnyItemActive() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16IsAnyItemFocusedEv"]
    pub fn IsAnyItemFocused() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetItemRectMinEv"]
    pub fn GetItemRectMin() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetItemRectMaxEv"]
    pub fn GetItemRectMax() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetItemRectSizeEv"]
    pub fn GetItemRectSize() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetItemAllowOverlapEv"]
    pub fn SetItemAllowOverlap();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsRectVisibleERK6ImVec2"]
    pub fn IsRectVisible(size: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsRectVisibleERK6ImVec2S2_"]
    pub fn IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7GetTimeEv"]
    pub fn GetTime() -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetFrameCountEv"]
    pub fn GetFrameCount() -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18GetOverlayDrawListEv"]
    pub fn GetOverlayDrawList() -> *mut ImDrawList;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetDrawListSharedDataEv"]
    pub fn GetDrawListSharedData() -> *mut ImDrawListSharedData;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetStyleColorNameEi"]
    pub fn GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetStateStorageEP12ImGuiStorage"]
    pub fn SetStateStorage(storage: *mut ImGuiStorage);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetStateStorageEv"]
    pub fn GetStateStorage() -> *mut ImGuiStorage;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12CalcTextSizeEPKcS1_bf"]
    pub fn CalcTextSize(text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, hide_text_after_double_hash: bool, wrap_width: f32) -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CalcListClippingEifPiS0_"]
    pub fn CalcListClipping(items_count: ::std::os::raw::c_int, items_height: f32, out_items_display_start: *mut ::std::os::raw::c_int, out_items_display_end: *mut ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15BeginChildFrameEjRK6ImVec2i"]
    pub fn BeginChildFrame(id: ImGuiID, size: *const ImVec2, flags: ImGuiWindowFlags) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13EndChildFrameEv"]
    pub fn EndChildFrame();
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ColorConvertU32ToFloat4Ej"]
    pub fn ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4"]
    pub fn ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_"]
    pub fn ColorConvertRGBtoHSV(r: f32, g: f32, b: f32, out_h: *mut f32, out_s: *mut f32, out_v: *mut f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_"]
    pub fn ColorConvertHSVtoRGB(h: f32, s: f32, v: f32, out_r: *mut f32, out_g: *mut f32, out_b: *mut f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetKeyIndexEi"]
    pub fn GetKeyIndex(imgui_key: ImGuiKey) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9IsKeyDownEi"]
    pub fn IsKeyDown(user_key_index: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsKeyPressedEib"]
    pub fn IsKeyPressed(user_key_index: ::std::os::raw::c_int, repeat: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsKeyReleasedEi"]
    pub fn IsKeyReleased(user_key_index: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19GetKeyPressedAmountEiff"]
    pub fn GetKeyPressedAmount(key_index: ::std::os::raw::c_int, repeat_delay: f32, rate: f32) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsMouseDownEi"]
    pub fn IsMouseDown(button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsAnyMouseDownEv"]
    pub fn IsAnyMouseDown() -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsMouseClickedEib"]
    pub fn IsMouseClicked(button: ::std::os::raw::c_int, repeat: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20IsMouseDoubleClickedEi"]
    pub fn IsMouseDoubleClicked(button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMouseReleasedEi"]
    pub fn IsMouseReleased(button: ::std::os::raw::c_int) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMouseDraggingEif"]
    pub fn IsMouseDragging(button: ::std::os::raw::c_int, lock_threshold: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b"]
    pub fn IsMouseHoveringRect(r_min: *const ImVec2, r_max: *const ImVec2, clip: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMousePosValidEPK6ImVec2"]
    pub fn IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetMousePosEv"]
    pub fn GetMousePos() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv"]
    pub fn GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetMouseDragDeltaEif"]
    pub fn GetMouseDragDelta(button: ::std::os::raw::c_int, lock_threshold: f32) -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19ResetMouseDragDeltaEi"]
    pub fn ResetMouseDragDelta(button: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetMouseCursorEv"]
    pub fn GetMouseCursor() -> ImGuiMouseCursor;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetMouseCursorEi"]
    pub fn SetMouseCursor(type_: ImGuiMouseCursor);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22CaptureKeyboardFromAppEb"]
    pub fn CaptureKeyboardFromApp(capture: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19CaptureMouseFromAppEb"]
    pub fn CaptureMouseFromApp(capture: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16GetClipboardTextEv"]
    pub fn GetClipboardText() -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetClipboardTextEPKc"]
    pub fn SetClipboardText(text: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23LoadIniSettingsFromDiskEPKc"]
    pub fn LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm"]
    pub fn LoadIniSettingsFromMemory(ini_data: *const ::std::os::raw::c_char, ini_size: usize);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21SaveIniSettingsToDiskEPKc"]
    pub fn SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23SaveIniSettingsToMemoryEPm"]
    pub fn SaveIniSettingsToMemory(out_ini_size: *mut usize) -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_"]
    pub fn SetAllocatorFunctions(alloc_func: ::std::option::Option<unsafe extern "C" fn(sz: usize, user_data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void>, free_func: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void)>, user_data: *mut ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MemAllocEm"]
    pub fn MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}

extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7MemFreeEPv"]
    pub fn MemFree(ptr: *mut ::std::os::raw::c_void);
}

impl ImGuiWindowFlags_ { pub const None: ImGuiWindowFlags_ = ImGuiWindowFlags_(0); }

impl ImGuiWindowFlags_ { pub const NoTitleBar: ImGuiWindowFlags_ = ImGuiWindowFlags_(1); }

impl ImGuiWindowFlags_ { pub const NoResize: ImGuiWindowFlags_ = ImGuiWindowFlags_(2); }

impl ImGuiWindowFlags_ { pub const NoMove: ImGuiWindowFlags_ = ImGuiWindowFlags_(4); }

impl ImGuiWindowFlags_ { pub const NoScrollbar: ImGuiWindowFlags_ = ImGuiWindowFlags_(8); }

impl ImGuiWindowFlags_ { pub const NoScrollWithMouse: ImGuiWindowFlags_ = ImGuiWindowFlags_(16); }

impl ImGuiWindowFlags_ { pub const NoCollapse: ImGuiWindowFlags_ = ImGuiWindowFlags_(32); }

impl ImGuiWindowFlags_ { pub const AlwaysAutoResize: ImGuiWindowFlags_ = ImGuiWindowFlags_(64); }

impl ImGuiWindowFlags_ { pub const NoSavedSettings: ImGuiWindowFlags_ = ImGuiWindowFlags_(256); }

impl ImGuiWindowFlags_ { pub const NoInputs: ImGuiWindowFlags_ = ImGuiWindowFlags_(512); }

impl ImGuiWindowFlags_ { pub const MenuBar: ImGuiWindowFlags_ = ImGuiWindowFlags_(1024); }

impl ImGuiWindowFlags_ { pub const HorizontalScrollbar: ImGuiWindowFlags_ = ImGuiWindowFlags_(2048); }

impl ImGuiWindowFlags_ { pub const NoFocusOnAppearing: ImGuiWindowFlags_ = ImGuiWindowFlags_(4096); }

impl ImGuiWindowFlags_ { pub const NoBringToFrontOnFocus: ImGuiWindowFlags_ = ImGuiWindowFlags_(8192); }

impl ImGuiWindowFlags_ { pub const AlwaysVerticalScrollbar: ImGuiWindowFlags_ = ImGuiWindowFlags_(16384); }

impl ImGuiWindowFlags_ { pub const AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = ImGuiWindowFlags_(32768); }

impl ImGuiWindowFlags_ { pub const AlwaysUseWindowPadding: ImGuiWindowFlags_ = ImGuiWindowFlags_(65536); }

impl ImGuiWindowFlags_ { pub const ResizeFromAnySide: ImGuiWindowFlags_ = ImGuiWindowFlags_(131072); }

impl ImGuiWindowFlags_ { pub const NoNavInputs: ImGuiWindowFlags_ = ImGuiWindowFlags_(262144); }

impl ImGuiWindowFlags_ { pub const NoNavFocus: ImGuiWindowFlags_ = ImGuiWindowFlags_(524288); }

impl ImGuiWindowFlags_ { pub const NoNav: ImGuiWindowFlags_ = ImGuiWindowFlags_(786432); }

impl ImGuiWindowFlags_ { pub const NavFlattened: ImGuiWindowFlags_ = ImGuiWindowFlags_(8388608); }

impl ImGuiWindowFlags_ { pub const ChildWindow: ImGuiWindowFlags_ = ImGuiWindowFlags_(16777216); }

impl ImGuiWindowFlags_ { pub const Tooltip: ImGuiWindowFlags_ = ImGuiWindowFlags_(33554432); }

impl ImGuiWindowFlags_ { pub const Popup: ImGuiWindowFlags_ = ImGuiWindowFlags_(67108864); }

impl ImGuiWindowFlags_ { pub const Modal: ImGuiWindowFlags_ = ImGuiWindowFlags_(134217728); }

impl ImGuiWindowFlags_ { pub const ChildMenu: ImGuiWindowFlags_ = ImGuiWindowFlags_(268435456); }

impl ::std::ops::BitOr<ImGuiWindowFlags_> for ImGuiWindowFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiWindowFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiWindowFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiWindowFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiWindowFlags_> for ImGuiWindowFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiWindowFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiWindowFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiWindowFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiWindowFlags_(pub u32);

impl ImGuiInputTextFlags_ { pub const None: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(0); }

impl ImGuiInputTextFlags_ { pub const CharsDecimal: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(1); }

impl ImGuiInputTextFlags_ { pub const CharsHexadecimal: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(2); }

impl ImGuiInputTextFlags_ { pub const CharsUppercase: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(4); }

impl ImGuiInputTextFlags_ { pub const CharsNoBlank: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(8); }

impl ImGuiInputTextFlags_ { pub const AutoSelectAll: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(16); }

impl ImGuiInputTextFlags_ { pub const EnterReturnsTrue: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(32); }

impl ImGuiInputTextFlags_ { pub const CallbackCompletion: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(64); }

impl ImGuiInputTextFlags_ { pub const CallbackHistory: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(128); }

impl ImGuiInputTextFlags_ { pub const CallbackAlways: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(256); }

impl ImGuiInputTextFlags_ { pub const CallbackCharFilter: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(512); }

impl ImGuiInputTextFlags_ { pub const AllowTabInput: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(1024); }

impl ImGuiInputTextFlags_ { pub const CtrlEnterForNewLine: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(2048); }

impl ImGuiInputTextFlags_ { pub const NoHorizontalScroll: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(4096); }

impl ImGuiInputTextFlags_ { pub const AlwaysInsertMode: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(8192); }

impl ImGuiInputTextFlags_ { pub const ReadOnly: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(16384); }

impl ImGuiInputTextFlags_ { pub const Password: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(32768); }

impl ImGuiInputTextFlags_ { pub const NoUndoRedo: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(65536); }

impl ImGuiInputTextFlags_ { pub const CharsScientific: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(131072); }

impl ImGuiInputTextFlags_ { pub const Multiline: ImGuiInputTextFlags_ = ImGuiInputTextFlags_(1048576); }

impl ::std::ops::BitOr<ImGuiInputTextFlags_> for ImGuiInputTextFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiInputTextFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiInputTextFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiInputTextFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiInputTextFlags_> for ImGuiInputTextFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiInputTextFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiInputTextFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiInputTextFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiInputTextFlags_(pub u32);

impl ImGuiTreeNodeFlags_ { pub const None: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(0); }

impl ImGuiTreeNodeFlags_ { pub const Selected: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(1); }

impl ImGuiTreeNodeFlags_ { pub const Framed: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(2); }

impl ImGuiTreeNodeFlags_ { pub const AllowItemOverlap: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(4); }

impl ImGuiTreeNodeFlags_ { pub const NoTreePushOnOpen: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(8); }

impl ImGuiTreeNodeFlags_ { pub const NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(16); }

impl ImGuiTreeNodeFlags_ { pub const DefaultOpen: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(32); }

impl ImGuiTreeNodeFlags_ { pub const OpenOnDoubleClick: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(64); }

impl ImGuiTreeNodeFlags_ { pub const OpenOnArrow: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(128); }

impl ImGuiTreeNodeFlags_ { pub const Leaf: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(256); }

impl ImGuiTreeNodeFlags_ { pub const Bullet: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(512); }

impl ImGuiTreeNodeFlags_ { pub const FramePadding: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(1024); }

impl ImGuiTreeNodeFlags_ { pub const NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(8192); }

impl ImGuiTreeNodeFlags_ { pub const CollapsingHeader: ImGuiTreeNodeFlags_ = ImGuiTreeNodeFlags_(26); }

impl ::std::ops::BitOr<ImGuiTreeNodeFlags_> for ImGuiTreeNodeFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiTreeNodeFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiTreeNodeFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiTreeNodeFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiTreeNodeFlags_> for ImGuiTreeNodeFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiTreeNodeFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiTreeNodeFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiTreeNodeFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiTreeNodeFlags_(pub u32);

impl ImGuiSelectableFlags_ { pub const None: ImGuiSelectableFlags_ = ImGuiSelectableFlags_(0); }

impl ImGuiSelectableFlags_ { pub const DontClosePopups: ImGuiSelectableFlags_ = ImGuiSelectableFlags_(1); }

impl ImGuiSelectableFlags_ { pub const SpanAllColumns: ImGuiSelectableFlags_ = ImGuiSelectableFlags_(2); }

impl ImGuiSelectableFlags_ { pub const AllowDoubleClick: ImGuiSelectableFlags_ = ImGuiSelectableFlags_(4); }

impl ::std::ops::BitOr<ImGuiSelectableFlags_> for ImGuiSelectableFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiSelectableFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiSelectableFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiSelectableFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiSelectableFlags_> for ImGuiSelectableFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiSelectableFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiSelectableFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiSelectableFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiSelectableFlags_(pub u32);

impl ImGuiComboFlags_ { pub const None: ImGuiComboFlags_ = ImGuiComboFlags_(0); }

impl ImGuiComboFlags_ { pub const PopupAlignLeft: ImGuiComboFlags_ = ImGuiComboFlags_(1); }

impl ImGuiComboFlags_ { pub const HeightSmall: ImGuiComboFlags_ = ImGuiComboFlags_(2); }

impl ImGuiComboFlags_ { pub const HeightRegular: ImGuiComboFlags_ = ImGuiComboFlags_(4); }

impl ImGuiComboFlags_ { pub const HeightLarge: ImGuiComboFlags_ = ImGuiComboFlags_(8); }

impl ImGuiComboFlags_ { pub const HeightLargest: ImGuiComboFlags_ = ImGuiComboFlags_(16); }

impl ImGuiComboFlags_ { pub const NoArrowButton: ImGuiComboFlags_ = ImGuiComboFlags_(32); }

impl ImGuiComboFlags_ { pub const NoPreview: ImGuiComboFlags_ = ImGuiComboFlags_(64); }

impl ImGuiComboFlags_ { pub const HeightMask_: ImGuiComboFlags_ = ImGuiComboFlags_(30); }

impl ::std::ops::BitOr<ImGuiComboFlags_> for ImGuiComboFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiComboFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiComboFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiComboFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiComboFlags_> for ImGuiComboFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiComboFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiComboFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiComboFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiComboFlags_(pub u32);

impl ImGuiFocusedFlags_ { pub const None: ImGuiFocusedFlags_ = ImGuiFocusedFlags_(0); }

impl ImGuiFocusedFlags_ { pub const ChildWindows: ImGuiFocusedFlags_ = ImGuiFocusedFlags_(1); }

impl ImGuiFocusedFlags_ { pub const RootWindow: ImGuiFocusedFlags_ = ImGuiFocusedFlags_(2); }

impl ImGuiFocusedFlags_ { pub const AnyWindow: ImGuiFocusedFlags_ = ImGuiFocusedFlags_(4); }

impl ImGuiFocusedFlags_ { pub const RootAndChildWindows: ImGuiFocusedFlags_ = ImGuiFocusedFlags_(3); }

impl ::std::ops::BitOr<ImGuiFocusedFlags_> for ImGuiFocusedFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiFocusedFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiFocusedFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiFocusedFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiFocusedFlags_> for ImGuiFocusedFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiFocusedFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiFocusedFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiFocusedFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiFocusedFlags_(pub u32);

impl ImGuiHoveredFlags_ { pub const None: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(0); }

impl ImGuiHoveredFlags_ { pub const ChildWindows: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(1); }

impl ImGuiHoveredFlags_ { pub const RootWindow: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(2); }

impl ImGuiHoveredFlags_ { pub const AnyWindow: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(4); }

impl ImGuiHoveredFlags_ { pub const AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(8); }

impl ImGuiHoveredFlags_ { pub const AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(32); }

impl ImGuiHoveredFlags_ { pub const AllowWhenOverlapped: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(64); }

impl ImGuiHoveredFlags_ { pub const RectOnly: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(104); }

impl ImGuiHoveredFlags_ { pub const RootAndChildWindows: ImGuiHoveredFlags_ = ImGuiHoveredFlags_(3); }

impl ::std::ops::BitOr<ImGuiHoveredFlags_> for ImGuiHoveredFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiHoveredFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiHoveredFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiHoveredFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiHoveredFlags_> for ImGuiHoveredFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiHoveredFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiHoveredFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiHoveredFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiHoveredFlags_(pub u32);

impl ImGuiDragDropFlags_ { pub const None: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(0); }

impl ImGuiDragDropFlags_ { pub const SourceNoPreviewTooltip: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(1); }

impl ImGuiDragDropFlags_ { pub const SourceNoDisableHover: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(2); }

impl ImGuiDragDropFlags_ { pub const SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(4); }

impl ImGuiDragDropFlags_ { pub const SourceAllowNullID: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(8); }

impl ImGuiDragDropFlags_ { pub const SourceExtern: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(16); }

impl ImGuiDragDropFlags_ { pub const AcceptBeforeDelivery: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(1024); }

impl ImGuiDragDropFlags_ { pub const AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(2048); }

impl ImGuiDragDropFlags_ { pub const AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(4096); }

impl ImGuiDragDropFlags_ { pub const AcceptPeekOnly: ImGuiDragDropFlags_ = ImGuiDragDropFlags_(3072); }

impl ::std::ops::BitOr<ImGuiDragDropFlags_> for ImGuiDragDropFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiDragDropFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiDragDropFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiDragDropFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiDragDropFlags_> for ImGuiDragDropFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiDragDropFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiDragDropFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiDragDropFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiDragDropFlags_(pub u32);

impl ImGuiDataType_ { pub const S32: ImGuiDataType_ = ImGuiDataType_(0); }

impl ImGuiDataType_ { pub const U32: ImGuiDataType_ = ImGuiDataType_(1); }

impl ImGuiDataType_ { pub const S64: ImGuiDataType_ = ImGuiDataType_(2); }

impl ImGuiDataType_ { pub const U64: ImGuiDataType_ = ImGuiDataType_(3); }

impl ImGuiDataType_ { pub const Float: ImGuiDataType_ = ImGuiDataType_(4); }

impl ImGuiDataType_ { pub const Double: ImGuiDataType_ = ImGuiDataType_(5); }

impl ImGuiDataType_ { pub const COUNT: ImGuiDataType_ = ImGuiDataType_(6); }

impl ::std::ops::BitOr<ImGuiDataType_> for ImGuiDataType_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiDataType_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiDataType_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiDataType_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiDataType_> for ImGuiDataType_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiDataType_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiDataType_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiDataType_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiDataType_(pub u32);

impl ImGuiDir_ { pub const None: ImGuiDir_ = ImGuiDir_(-1); }

impl ImGuiDir_ { pub const Left: ImGuiDir_ = ImGuiDir_(0); }

impl ImGuiDir_ { pub const Right: ImGuiDir_ = ImGuiDir_(1); }

impl ImGuiDir_ { pub const Up: ImGuiDir_ = ImGuiDir_(2); }

impl ImGuiDir_ { pub const Down: ImGuiDir_ = ImGuiDir_(3); }

impl ImGuiDir_ { pub const COUNT: ImGuiDir_ = ImGuiDir_(4); }

impl ::std::ops::BitOr<ImGuiDir_> for ImGuiDir_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiDir_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiDir_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiDir_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiDir_> for ImGuiDir_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiDir_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiDir_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiDir_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiDir_(pub i32);

impl ImGuiKey_ { pub const Tab: ImGuiKey_ = ImGuiKey_(0); }

impl ImGuiKey_ { pub const LeftArrow: ImGuiKey_ = ImGuiKey_(1); }

impl ImGuiKey_ { pub const RightArrow: ImGuiKey_ = ImGuiKey_(2); }

impl ImGuiKey_ { pub const UpArrow: ImGuiKey_ = ImGuiKey_(3); }

impl ImGuiKey_ { pub const DownArrow: ImGuiKey_ = ImGuiKey_(4); }

impl ImGuiKey_ { pub const PageUp: ImGuiKey_ = ImGuiKey_(5); }

impl ImGuiKey_ { pub const PageDown: ImGuiKey_ = ImGuiKey_(6); }

impl ImGuiKey_ { pub const Home: ImGuiKey_ = ImGuiKey_(7); }

impl ImGuiKey_ { pub const End: ImGuiKey_ = ImGuiKey_(8); }

impl ImGuiKey_ { pub const Insert: ImGuiKey_ = ImGuiKey_(9); }

impl ImGuiKey_ { pub const Delete: ImGuiKey_ = ImGuiKey_(10); }

impl ImGuiKey_ { pub const Backspace: ImGuiKey_ = ImGuiKey_(11); }

impl ImGuiKey_ { pub const Space: ImGuiKey_ = ImGuiKey_(12); }

impl ImGuiKey_ { pub const Enter: ImGuiKey_ = ImGuiKey_(13); }

impl ImGuiKey_ { pub const Escape: ImGuiKey_ = ImGuiKey_(14); }

impl ImGuiKey_ { pub const A: ImGuiKey_ = ImGuiKey_(15); }

impl ImGuiKey_ { pub const C: ImGuiKey_ = ImGuiKey_(16); }

impl ImGuiKey_ { pub const V: ImGuiKey_ = ImGuiKey_(17); }

impl ImGuiKey_ { pub const X: ImGuiKey_ = ImGuiKey_(18); }

impl ImGuiKey_ { pub const Y: ImGuiKey_ = ImGuiKey_(19); }

impl ImGuiKey_ { pub const Z: ImGuiKey_ = ImGuiKey_(20); }

impl ImGuiKey_ { pub const COUNT: ImGuiKey_ = ImGuiKey_(21); }

impl ::std::ops::BitOr<ImGuiKey_> for ImGuiKey_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiKey_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiKey_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiKey_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiKey_> for ImGuiKey_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiKey_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiKey_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiKey_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiKey_(pub u32);

impl ImGuiNavInput_ { pub const Activate: ImGuiNavInput_ = ImGuiNavInput_(0); }

impl ImGuiNavInput_ { pub const Cancel: ImGuiNavInput_ = ImGuiNavInput_(1); }

impl ImGuiNavInput_ { pub const Input: ImGuiNavInput_ = ImGuiNavInput_(2); }

impl ImGuiNavInput_ { pub const Menu: ImGuiNavInput_ = ImGuiNavInput_(3); }

impl ImGuiNavInput_ { pub const DpadLeft: ImGuiNavInput_ = ImGuiNavInput_(4); }

impl ImGuiNavInput_ { pub const DpadRight: ImGuiNavInput_ = ImGuiNavInput_(5); }

impl ImGuiNavInput_ { pub const DpadUp: ImGuiNavInput_ = ImGuiNavInput_(6); }

impl ImGuiNavInput_ { pub const DpadDown: ImGuiNavInput_ = ImGuiNavInput_(7); }

impl ImGuiNavInput_ { pub const LStickLeft: ImGuiNavInput_ = ImGuiNavInput_(8); }

impl ImGuiNavInput_ { pub const LStickRight: ImGuiNavInput_ = ImGuiNavInput_(9); }

impl ImGuiNavInput_ { pub const LStickUp: ImGuiNavInput_ = ImGuiNavInput_(10); }

impl ImGuiNavInput_ { pub const LStickDown: ImGuiNavInput_ = ImGuiNavInput_(11); }

impl ImGuiNavInput_ { pub const FocusPrev: ImGuiNavInput_ = ImGuiNavInput_(12); }

impl ImGuiNavInput_ { pub const FocusNext: ImGuiNavInput_ = ImGuiNavInput_(13); }

impl ImGuiNavInput_ { pub const TweakSlow: ImGuiNavInput_ = ImGuiNavInput_(14); }

impl ImGuiNavInput_ { pub const TweakFast: ImGuiNavInput_ = ImGuiNavInput_(15); }

impl ImGuiNavInput_ { pub const KeyMenu_: ImGuiNavInput_ = ImGuiNavInput_(16); }

impl ImGuiNavInput_ { pub const KeyLeft_: ImGuiNavInput_ = ImGuiNavInput_(17); }

impl ImGuiNavInput_ { pub const KeyRight_: ImGuiNavInput_ = ImGuiNavInput_(18); }

impl ImGuiNavInput_ { pub const KeyUp_: ImGuiNavInput_ = ImGuiNavInput_(19); }

impl ImGuiNavInput_ { pub const KeyDown_: ImGuiNavInput_ = ImGuiNavInput_(20); }

impl ImGuiNavInput_ { pub const COUNT: ImGuiNavInput_ = ImGuiNavInput_(21); }

impl ImGuiNavInput_ { pub const InternalStart_: ImGuiNavInput_ = ImGuiNavInput_(16); }

impl ::std::ops::BitOr<ImGuiNavInput_> for ImGuiNavInput_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiNavInput_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiNavInput_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiNavInput_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiNavInput_> for ImGuiNavInput_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiNavInput_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiNavInput_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiNavInput_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiNavInput_(pub u32);

impl ImGuiConfigFlags_ { pub const NavEnableKeyboard: ImGuiConfigFlags_ = ImGuiConfigFlags_(1); }

impl ImGuiConfigFlags_ { pub const NavEnableGamepad: ImGuiConfigFlags_ = ImGuiConfigFlags_(2); }

impl ImGuiConfigFlags_ { pub const NavEnableSetMousePos: ImGuiConfigFlags_ = ImGuiConfigFlags_(4); }

impl ImGuiConfigFlags_ { pub const NavNoCaptureKeyboard: ImGuiConfigFlags_ = ImGuiConfigFlags_(8); }

impl ImGuiConfigFlags_ { pub const NoMouse: ImGuiConfigFlags_ = ImGuiConfigFlags_(16); }

impl ImGuiConfigFlags_ { pub const NoMouseCursorChange: ImGuiConfigFlags_ = ImGuiConfigFlags_(32); }

impl ImGuiConfigFlags_ { pub const IsSRGB: ImGuiConfigFlags_ = ImGuiConfigFlags_(1048576); }

impl ImGuiConfigFlags_ { pub const IsTouchScreen: ImGuiConfigFlags_ = ImGuiConfigFlags_(2097152); }

impl ::std::ops::BitOr<ImGuiConfigFlags_> for ImGuiConfigFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiConfigFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiConfigFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiConfigFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiConfigFlags_> for ImGuiConfigFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiConfigFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiConfigFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiConfigFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiConfigFlags_(pub u32);

impl ImGuiBackendFlags_ { pub const HasGamepad: ImGuiBackendFlags_ = ImGuiBackendFlags_(1); }

impl ImGuiBackendFlags_ { pub const HasMouseCursors: ImGuiBackendFlags_ = ImGuiBackendFlags_(2); }

impl ImGuiBackendFlags_ { pub const HasSetMousePos: ImGuiBackendFlags_ = ImGuiBackendFlags_(4); }

impl ::std::ops::BitOr<ImGuiBackendFlags_> for ImGuiBackendFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiBackendFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiBackendFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiBackendFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiBackendFlags_> for ImGuiBackendFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiBackendFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiBackendFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiBackendFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiBackendFlags_(pub u32);

impl ImGuiCol_ { pub const Text: ImGuiCol_ = ImGuiCol_(0); }

impl ImGuiCol_ { pub const TextDisabled: ImGuiCol_ = ImGuiCol_(1); }

impl ImGuiCol_ { pub const WindowBg: ImGuiCol_ = ImGuiCol_(2); }

impl ImGuiCol_ { pub const ChildBg: ImGuiCol_ = ImGuiCol_(3); }

impl ImGuiCol_ { pub const PopupBg: ImGuiCol_ = ImGuiCol_(4); }

impl ImGuiCol_ { pub const Border: ImGuiCol_ = ImGuiCol_(5); }

impl ImGuiCol_ { pub const BorderShadow: ImGuiCol_ = ImGuiCol_(6); }

impl ImGuiCol_ { pub const FrameBg: ImGuiCol_ = ImGuiCol_(7); }

impl ImGuiCol_ { pub const FrameBgHovered: ImGuiCol_ = ImGuiCol_(8); }

impl ImGuiCol_ { pub const FrameBgActive: ImGuiCol_ = ImGuiCol_(9); }

impl ImGuiCol_ { pub const TitleBg: ImGuiCol_ = ImGuiCol_(10); }

impl ImGuiCol_ { pub const TitleBgActive: ImGuiCol_ = ImGuiCol_(11); }

impl ImGuiCol_ { pub const TitleBgCollapsed: ImGuiCol_ = ImGuiCol_(12); }

impl ImGuiCol_ { pub const MenuBarBg: ImGuiCol_ = ImGuiCol_(13); }

impl ImGuiCol_ { pub const ScrollbarBg: ImGuiCol_ = ImGuiCol_(14); }

impl ImGuiCol_ { pub const ScrollbarGrab: ImGuiCol_ = ImGuiCol_(15); }

impl ImGuiCol_ { pub const ScrollbarGrabHovered: ImGuiCol_ = ImGuiCol_(16); }

impl ImGuiCol_ { pub const ScrollbarGrabActive: ImGuiCol_ = ImGuiCol_(17); }

impl ImGuiCol_ { pub const CheckMark: ImGuiCol_ = ImGuiCol_(18); }

impl ImGuiCol_ { pub const SliderGrab: ImGuiCol_ = ImGuiCol_(19); }

impl ImGuiCol_ { pub const SliderGrabActive: ImGuiCol_ = ImGuiCol_(20); }

impl ImGuiCol_ { pub const Button: ImGuiCol_ = ImGuiCol_(21); }

impl ImGuiCol_ { pub const ButtonHovered: ImGuiCol_ = ImGuiCol_(22); }

impl ImGuiCol_ { pub const ButtonActive: ImGuiCol_ = ImGuiCol_(23); }

impl ImGuiCol_ { pub const Header: ImGuiCol_ = ImGuiCol_(24); }

impl ImGuiCol_ { pub const HeaderHovered: ImGuiCol_ = ImGuiCol_(25); }

impl ImGuiCol_ { pub const HeaderActive: ImGuiCol_ = ImGuiCol_(26); }

impl ImGuiCol_ { pub const Separator: ImGuiCol_ = ImGuiCol_(27); }

impl ImGuiCol_ { pub const SeparatorHovered: ImGuiCol_ = ImGuiCol_(28); }

impl ImGuiCol_ { pub const SeparatorActive: ImGuiCol_ = ImGuiCol_(29); }

impl ImGuiCol_ { pub const ResizeGrip: ImGuiCol_ = ImGuiCol_(30); }

impl ImGuiCol_ { pub const ResizeGripHovered: ImGuiCol_ = ImGuiCol_(31); }

impl ImGuiCol_ { pub const ResizeGripActive: ImGuiCol_ = ImGuiCol_(32); }

impl ImGuiCol_ { pub const PlotLines: ImGuiCol_ = ImGuiCol_(33); }

impl ImGuiCol_ { pub const PlotLinesHovered: ImGuiCol_ = ImGuiCol_(34); }

impl ImGuiCol_ { pub const PlotHistogram: ImGuiCol_ = ImGuiCol_(35); }

impl ImGuiCol_ { pub const PlotHistogramHovered: ImGuiCol_ = ImGuiCol_(36); }

impl ImGuiCol_ { pub const TextSelectedBg: ImGuiCol_ = ImGuiCol_(37); }

impl ImGuiCol_ { pub const ModalWindowDarkening: ImGuiCol_ = ImGuiCol_(38); }

impl ImGuiCol_ { pub const DragDropTarget: ImGuiCol_ = ImGuiCol_(39); }

impl ImGuiCol_ { pub const NavHighlight: ImGuiCol_ = ImGuiCol_(40); }

impl ImGuiCol_ { pub const NavWindowingHighlight: ImGuiCol_ = ImGuiCol_(41); }

impl ImGuiCol_ { pub const COUNT: ImGuiCol_ = ImGuiCol_(42); }

impl ::std::ops::BitOr<ImGuiCol_> for ImGuiCol_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiCol_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiCol_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiCol_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiCol_> for ImGuiCol_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiCol_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiCol_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiCol_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiCol_(pub u32);

impl ImGuiStyleVar_ { pub const Alpha: ImGuiStyleVar_ = ImGuiStyleVar_(0); }

impl ImGuiStyleVar_ { pub const WindowPadding: ImGuiStyleVar_ = ImGuiStyleVar_(1); }

impl ImGuiStyleVar_ { pub const WindowRounding: ImGuiStyleVar_ = ImGuiStyleVar_(2); }

impl ImGuiStyleVar_ { pub const WindowBorderSize: ImGuiStyleVar_ = ImGuiStyleVar_(3); }

impl ImGuiStyleVar_ { pub const WindowMinSize: ImGuiStyleVar_ = ImGuiStyleVar_(4); }

impl ImGuiStyleVar_ { pub const WindowTitleAlign: ImGuiStyleVar_ = ImGuiStyleVar_(5); }

impl ImGuiStyleVar_ { pub const ChildRounding: ImGuiStyleVar_ = ImGuiStyleVar_(6); }

impl ImGuiStyleVar_ { pub const ChildBorderSize: ImGuiStyleVar_ = ImGuiStyleVar_(7); }

impl ImGuiStyleVar_ { pub const PopupRounding: ImGuiStyleVar_ = ImGuiStyleVar_(8); }

impl ImGuiStyleVar_ { pub const PopupBorderSize: ImGuiStyleVar_ = ImGuiStyleVar_(9); }

impl ImGuiStyleVar_ { pub const FramePadding: ImGuiStyleVar_ = ImGuiStyleVar_(10); }

impl ImGuiStyleVar_ { pub const FrameRounding: ImGuiStyleVar_ = ImGuiStyleVar_(11); }

impl ImGuiStyleVar_ { pub const FrameBorderSize: ImGuiStyleVar_ = ImGuiStyleVar_(12); }

impl ImGuiStyleVar_ { pub const ItemSpacing: ImGuiStyleVar_ = ImGuiStyleVar_(13); }

impl ImGuiStyleVar_ { pub const ItemInnerSpacing: ImGuiStyleVar_ = ImGuiStyleVar_(14); }

impl ImGuiStyleVar_ { pub const IndentSpacing: ImGuiStyleVar_ = ImGuiStyleVar_(15); }

impl ImGuiStyleVar_ { pub const ScrollbarSize: ImGuiStyleVar_ = ImGuiStyleVar_(16); }

impl ImGuiStyleVar_ { pub const ScrollbarRounding: ImGuiStyleVar_ = ImGuiStyleVar_(17); }

impl ImGuiStyleVar_ { pub const GrabMinSize: ImGuiStyleVar_ = ImGuiStyleVar_(18); }

impl ImGuiStyleVar_ { pub const GrabRounding: ImGuiStyleVar_ = ImGuiStyleVar_(19); }

impl ImGuiStyleVar_ { pub const ButtonTextAlign: ImGuiStyleVar_ = ImGuiStyleVar_(20); }

impl ImGuiStyleVar_ { pub const COUNT: ImGuiStyleVar_ = ImGuiStyleVar_(21); }

impl ::std::ops::BitOr<ImGuiStyleVar_> for ImGuiStyleVar_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiStyleVar_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiStyleVar_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiStyleVar_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiStyleVar_> for ImGuiStyleVar_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiStyleVar_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiStyleVar_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiStyleVar_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiStyleVar_(pub u32);

impl ImGuiColorEditFlags_ { pub const None: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(0); }

impl ImGuiColorEditFlags_ { pub const NoAlpha: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(2); }

impl ImGuiColorEditFlags_ { pub const NoPicker: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(4); }

impl ImGuiColorEditFlags_ { pub const NoOptions: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(8); }

impl ImGuiColorEditFlags_ { pub const NoSmallPreview: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(16); }

impl ImGuiColorEditFlags_ { pub const NoInputs: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(32); }

impl ImGuiColorEditFlags_ { pub const NoTooltip: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(64); }

impl ImGuiColorEditFlags_ { pub const NoLabel: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(128); }

impl ImGuiColorEditFlags_ { pub const NoSidePreview: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(256); }

impl ImGuiColorEditFlags_ { pub const NoDragDrop: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(512); }

impl ImGuiColorEditFlags_ { pub const AlphaBar: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(65536); }

impl ImGuiColorEditFlags_ { pub const AlphaPreview: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(131072); }

impl ImGuiColorEditFlags_ { pub const AlphaPreviewHalf: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(262144); }

impl ImGuiColorEditFlags_ { pub const HDR: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(524288); }

impl ImGuiColorEditFlags_ { pub const RGB: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(1048576); }

impl ImGuiColorEditFlags_ { pub const HSV: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(2097152); }

impl ImGuiColorEditFlags_ { pub const HEX: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(4194304); }

impl ImGuiColorEditFlags_ { pub const Uint8: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(8388608); }

impl ImGuiColorEditFlags_ { pub const Float: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(16777216); }

impl ImGuiColorEditFlags_ { pub const PickerHueBar: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(33554432); }

impl ImGuiColorEditFlags_ { pub const PickerHueWheel: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(67108864); }

impl ImGuiColorEditFlags_ { pub const _InputsMask: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(7340032); }

impl ImGuiColorEditFlags_ { pub const _DataTypeMask: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(25165824); }

impl ImGuiColorEditFlags_ { pub const _PickerMask: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(100663296); }

impl ImGuiColorEditFlags_ { pub const _OptionsDefault: ImGuiColorEditFlags_ = ImGuiColorEditFlags_(42991616); }

impl ::std::ops::BitOr<ImGuiColorEditFlags_> for ImGuiColorEditFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiColorEditFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiColorEditFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiColorEditFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiColorEditFlags_> for ImGuiColorEditFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiColorEditFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiColorEditFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiColorEditFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiColorEditFlags_(pub u32);

impl ImGuiMouseCursor_ { pub const None: ImGuiMouseCursor_ = ImGuiMouseCursor_(-1); }

impl ImGuiMouseCursor_ { pub const Arrow: ImGuiMouseCursor_ = ImGuiMouseCursor_(0); }

impl ImGuiMouseCursor_ { pub const TextInput: ImGuiMouseCursor_ = ImGuiMouseCursor_(1); }

impl ImGuiMouseCursor_ { pub const ResizeAll: ImGuiMouseCursor_ = ImGuiMouseCursor_(2); }

impl ImGuiMouseCursor_ { pub const ResizeNS: ImGuiMouseCursor_ = ImGuiMouseCursor_(3); }

impl ImGuiMouseCursor_ { pub const ResizeEW: ImGuiMouseCursor_ = ImGuiMouseCursor_(4); }

impl ImGuiMouseCursor_ { pub const ResizeNESW: ImGuiMouseCursor_ = ImGuiMouseCursor_(5); }

impl ImGuiMouseCursor_ { pub const ResizeNWSE: ImGuiMouseCursor_ = ImGuiMouseCursor_(6); }

impl ImGuiMouseCursor_ { pub const COUNT: ImGuiMouseCursor_ = ImGuiMouseCursor_(7); }

impl ::std::ops::BitOr<ImGuiMouseCursor_> for ImGuiMouseCursor_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiMouseCursor_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiMouseCursor_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiMouseCursor_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiMouseCursor_> for ImGuiMouseCursor_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiMouseCursor_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiMouseCursor_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiMouseCursor_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiMouseCursor_(pub i32);

impl ImGuiCond_ { pub const Always: ImGuiCond_ = ImGuiCond_(1); }

impl ImGuiCond_ { pub const Once: ImGuiCond_ = ImGuiCond_(2); }

impl ImGuiCond_ { pub const FirstUseEver: ImGuiCond_ = ImGuiCond_(4); }

impl ImGuiCond_ { pub const Appearing: ImGuiCond_ = ImGuiCond_(8); }

impl ::std::ops::BitOr<ImGuiCond_> for ImGuiCond_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImGuiCond_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImGuiCond_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImGuiCond_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImGuiCond_> for ImGuiCond_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImGuiCond_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImGuiCond_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImGuiCond_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImGuiCond_(pub u32);

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyle { pub Alpha: f32, pub WindowPadding: ImVec2, pub WindowRounding: f32, pub WindowBorderSize: f32, pub WindowMinSize: ImVec2, pub WindowTitleAlign: ImVec2, pub ChildRounding: f32, pub ChildBorderSize: f32, pub PopupRounding: f32, pub PopupBorderSize: f32, pub FramePadding: ImVec2, pub FrameRounding: f32, pub FrameBorderSize: f32, pub ItemSpacing: ImVec2, pub ItemInnerSpacing: ImVec2, pub TouchExtraPadding: ImVec2, pub IndentSpacing: f32, pub ColumnsMinSpacing: f32, pub ScrollbarSize: f32, pub ScrollbarRounding: f32, pub GrabMinSize: f32, pub GrabRounding: f32, pub ButtonTextAlign: ImVec2, pub DisplayWindowPadding: ImVec2, pub DisplaySafeAreaPadding: ImVec2, pub MouseCursorScale: f32, pub AntiAliasedLines: bool, pub AntiAliasedFill: bool, pub CurveTessellationTol: f32, pub Colors: [ImVec4; 42usize] }

#[test]
fn bindgen_test_layout_ImGuiStyle() {
    assert_eq!(::std::mem::size_of::<ImGuiStyle>(), 824usize, concat!( "Size of: " , stringify ! ( ImGuiStyle ) ));
    assert_eq!(::std::mem::align_of::<ImGuiStyle>(), 4usize, concat!( "Alignment of " , stringify ! ( ImGuiStyle ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Alpha as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( Alpha ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowPadding as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowPadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowRounding as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowBorderSize as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowBorderSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowMinSize as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowMinSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowTitleAlign as *const _ as usize }, 28usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( WindowTitleAlign ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildRounding as *const _ as usize }, 36usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ChildRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildBorderSize as *const _ as usize }, 40usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ChildBorderSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupRounding as *const _ as usize }, 44usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( PopupRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupBorderSize as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( PopupBorderSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FramePadding as *const _ as usize }, 52usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FramePadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameRounding as *const _ as usize }, 60usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FrameRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameBorderSize as *const _ as usize }, 64usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( FrameBorderSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemSpacing as *const _ as usize }, 68usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ItemSpacing ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemInnerSpacing as *const _ as usize }, 76usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ItemInnerSpacing ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TouchExtraPadding as *const _ as usize }, 84usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( TouchExtraPadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).IndentSpacing as *const _ as usize }, 92usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( IndentSpacing ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColumnsMinSpacing as *const _ as usize }, 96usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ColumnsMinSpacing ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarSize as *const _ as usize }, 100usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ScrollbarSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarRounding as *const _ as usize }, 104usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ScrollbarRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabMinSize as *const _ as usize }, 108usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( GrabMinSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabRounding as *const _ as usize }, 112usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( GrabRounding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ButtonTextAlign as *const _ as usize }, 116usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( ButtonTextAlign ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplayWindowPadding as *const _ as usize }, 124usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( DisplayWindowPadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplaySafeAreaPadding as *const _ as usize }, 132usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( DisplaySafeAreaPadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).MouseCursorScale as *const _ as usize }, 140usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( MouseCursorScale ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLines as *const _ as usize }, 144usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( AntiAliasedLines ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedFill as *const _ as usize }, 145usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( AntiAliasedFill ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CurveTessellationTol as *const _ as usize }, 148usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( CurveTessellationTol ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Colors as *const _ as usize }, 152usize, concat!( "Offset of field: " , stringify ! ( ImGuiStyle ) , "::" , stringify ! ( Colors ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImGuiStyle13ScaleAllSizesEf"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImGuiStyleC1Ev"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}

impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) { ImGuiStyle_ScaleAllSizes(self, scale_factor) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImGuiStyle_ImGuiStyle(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}

#[repr(C)]
pub struct ImGuiIO { pub ConfigFlags: ImGuiConfigFlags, pub BackendFlags: ImGuiBackendFlags, pub DisplaySize: ImVec2, pub DeltaTime: f32, pub IniSavingRate: f32, pub IniFilename: *const ::std::os::raw::c_char, pub LogFilename: *const ::std::os::raw::c_char, pub MouseDoubleClickTime: f32, pub MouseDoubleClickMaxDist: f32, pub MouseDragThreshold: f32, pub KeyMap: [::std::os::raw::c_int; 21usize], pub KeyRepeatDelay: f32, pub KeyRepeatRate: f32, pub UserData: *mut ::std::os::raw::c_void, pub Fonts: *mut ImFontAtlas, pub FontGlobalScale: f32, pub FontAllowUserScaling: bool, pub FontDefault: *mut ImFont, pub DisplayFramebufferScale: ImVec2, pub DisplayVisibleMin: ImVec2, pub DisplayVisibleMax: ImVec2, pub OptMacOSXBehaviors: bool, pub OptCursorBlink: bool, pub GetClipboardTextFn: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char>, pub SetClipboardTextFn: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, text: *const ::std::os::raw::c_char)>, pub ClipboardUserData: *mut ::std::os::raw::c_void, pub ImeSetInputScreenPosFn: ::std::option::Option<unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)>, pub ImeWindowHandle: *mut ::std::os::raw::c_void, pub RenderDrawListsFnDummy: *mut ::std::os::raw::c_void, pub MousePos: ImVec2, pub MouseDown: [bool; 5usize], pub MouseWheel: f32, pub MouseWheelH: f32, pub MouseDrawCursor: bool, pub KeyCtrl: bool, pub KeyShift: bool, pub KeyAlt: bool, pub KeySuper: bool, pub KeysDown: [bool; 512usize], pub InputCharacters: [ImWchar; 17usize], pub NavInputs: [f32; 21usize], pub WantCaptureMouse: bool, pub WantCaptureKeyboard: bool, pub WantTextInput: bool, pub WantSetMousePos: bool, pub WantSaveIniSettings: bool, pub NavActive: bool, pub NavVisible: bool, pub Framerate: f32, pub MetricsRenderVertices: ::std::os::raw::c_int, pub MetricsRenderIndices: ::std::os::raw::c_int, pub MetricsActiveWindows: ::std::os::raw::c_int, pub MouseDelta: ImVec2, pub MousePosPrev: ImVec2, pub MouseClickedPos: [ImVec2; 5usize], pub MouseClickedTime: [f32; 5usize], pub MouseClicked: [bool; 5usize], pub MouseDoubleClicked: [bool; 5usize], pub MouseReleased: [bool; 5usize], pub MouseDownOwned: [bool; 5usize], pub MouseDownDuration: [f32; 5usize], pub MouseDownDurationPrev: [f32; 5usize], pub MouseDragMaxDistanceAbs: [ImVec2; 5usize], pub MouseDragMaxDistanceSqr: [f32; 5usize], pub KeysDownDuration: [f32; 512usize], pub KeysDownDurationPrev: [f32; 512usize], pub NavInputsDownDuration: [f32; 21usize], pub NavInputsDownDurationPrev: [f32; 21usize] }

#[test]
fn bindgen_test_layout_ImGuiIO() {
    assert_eq!(::std::mem::size_of::<ImGuiIO>(), 5400usize, concat!( "Size of: " , stringify ! ( ImGuiIO ) ));
    assert_eq!(::std::mem::align_of::<ImGuiIO>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiIO ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigFlags as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ConfigFlags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendFlags as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( BackendFlags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplaySize as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplaySize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DeltaTime as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DeltaTime ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniSavingRate as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( IniSavingRate ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniFilename as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( IniFilename ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).LogFilename as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( LogFilename ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickTime as *const _ as usize }, 40usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClickTime ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickMaxDist as *const _ as usize }, 44usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClickMaxDist ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragThreshold as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragThreshold ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMap as *const _ as usize }, 52usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyMap ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatDelay as *const _ as usize }, 136usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyRepeatDelay ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatRate as *const _ as usize }, 140usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyRepeatRate ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).UserData as *const _ as usize }, 144usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( UserData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Fonts as *const _ as usize }, 152usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( Fonts ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontGlobalScale as *const _ as usize }, 160usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontGlobalScale ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontAllowUserScaling as *const _ as usize }, 164usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontAllowUserScaling ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontDefault as *const _ as usize }, 168usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( FontDefault ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayFramebufferScale as *const _ as usize }, 176usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplayFramebufferScale ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayVisibleMin as *const _ as usize }, 184usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplayVisibleMin ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayVisibleMax as *const _ as usize }, 192usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( DisplayVisibleMax ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).OptMacOSXBehaviors as *const _ as usize }, 200usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( OptMacOSXBehaviors ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).OptCursorBlink as *const _ as usize }, 201usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( OptCursorBlink ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).GetClipboardTextFn as *const _ as usize }, 208usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( GetClipboardTextFn ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).SetClipboardTextFn as *const _ as usize }, 216usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( SetClipboardTextFn ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ClipboardUserData as *const _ as usize }, 224usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ClipboardUserData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ImeSetInputScreenPosFn as *const _ as usize }, 232usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ImeSetInputScreenPosFn ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ImeWindowHandle as *const _ as usize }, 240usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( ImeWindowHandle ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).RenderDrawListsFnDummy as *const _ as usize }, 248usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( RenderDrawListsFnDummy ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePos as *const _ as usize }, 256usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MousePos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDown as *const _ as usize }, 264usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDown ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheel as *const _ as usize }, 272usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseWheel ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheelH as *const _ as usize }, 276usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseWheelH ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDrawCursor as *const _ as usize }, 280usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDrawCursor ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyCtrl as *const _ as usize }, 281usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyCtrl ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyShift as *const _ as usize }, 282usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyShift ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyAlt as *const _ as usize }, 283usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeyAlt ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeySuper as *const _ as usize }, 284usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeySuper ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDown as *const _ as usize }, 285usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDown ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputCharacters as *const _ as usize }, 798usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( InputCharacters ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputs as *const _ as usize }, 832usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureMouse as *const _ as usize }, 916usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantCaptureMouse ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureKeyboard as *const _ as usize }, 917usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantCaptureKeyboard ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantTextInput as *const _ as usize }, 918usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantTextInput ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSetMousePos as *const _ as usize }, 919usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantSetMousePos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSaveIniSettings as *const _ as usize }, 920usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( WantSaveIniSettings ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavActive as *const _ as usize }, 921usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavActive ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavVisible as *const _ as usize }, 922usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavVisible ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Framerate as *const _ as usize }, 924usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( Framerate ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderVertices as *const _ as usize }, 928usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsRenderVertices ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderIndices as *const _ as usize }, 932usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsRenderIndices ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveWindows as *const _ as usize }, 936usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MetricsActiveWindows ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDelta as *const _ as usize }, 940usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDelta ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePosPrev as *const _ as usize }, 948usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MousePosPrev ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedPos as *const _ as usize }, 956usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClickedPos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedTime as *const _ as usize }, 996usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClickedTime ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClicked as *const _ as usize }, 1016usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseClicked ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClicked as *const _ as usize }, 1021usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDoubleClicked ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseReleased as *const _ as usize }, 1026usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseReleased ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownOwned as *const _ as usize }, 1031usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownOwned ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDuration as *const _ as usize }, 1036usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownDuration ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDurationPrev as *const _ as usize }, 1056usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDownDurationPrev ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceAbs as *const _ as usize }, 1076usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragMaxDistanceAbs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceSqr as *const _ as usize }, 1116usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( MouseDragMaxDistanceSqr ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDuration as *const _ as usize }, 1136usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDownDuration ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDurationPrev as *const _ as usize }, 3184usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( KeysDownDurationPrev ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDuration as *const _ as usize }, 5232usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputsDownDuration ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDurationPrev as *const _ as usize }, 5316usize, concat!( "Offset of field: " , stringify ! ( ImGuiIO ) , "::" , stringify ! ( NavInputsDownDurationPrev ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO17AddInputCharacterEt"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ImWchar);
}

extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO22AddInputCharactersUTF8EPKc"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, utf8_chars: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIOC1Ev"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}

impl ImGuiIO {
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ImWchar) { ImGuiIO_AddInputCharacter(self, c) }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, utf8_chars: *const ::std::os::raw::c_char) { ImGuiIO_AddInputCharactersUTF8(self, utf8_chars) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImGuiIO_ImGuiIO(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImVector<T> { pub Size: ::std::os::raw::c_int, pub Capacity: ::std::os::raw::c_int, pub Data: *mut T, pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>> }

pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImNewDummy { pub _address: u8 }

#[test]
fn bindgen_test_layout_ImNewDummy() {
    assert_eq!(::std::mem::size_of::<ImNewDummy>(), 1usize, concat!( "Size of: " , stringify ! ( ImNewDummy ) ));
    assert_eq!(::std::mem::align_of::<ImNewDummy>(), 1usize, concat!( "Alignment of " , stringify ! ( ImNewDummy ) ));
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiOnceUponAFrame { pub RefFrame: ::std::os::raw::c_int }

#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    assert_eq!(::std::mem::size_of::<ImGuiOnceUponAFrame>(), 4usize, concat!( "Size of: " , stringify ! ( ImGuiOnceUponAFrame ) ));
    assert_eq!(::std::mem::align_of::<ImGuiOnceUponAFrame>(), 4usize, concat!( "Alignment of " , stringify ! ( ImGuiOnceUponAFrame ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiOnceUponAFrame>())).RefFrame as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiOnceUponAFrame ) , "::" , stringify ! ( RefFrame ) ));
}

#[repr(C)]
pub struct ImGuiTextFilter { pub InputBuf: [::std::os::raw::c_char; 256usize], pub Filters: ImVector<ImGuiTextFilter_TextRange>, pub CountGrep: ::std::os::raw::c_int }

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTextFilter_TextRange { pub b: *const ::std::os::raw::c_char, pub e: *const ::std::os::raw::c_char }

#[test]
fn bindgen_test_layout_ImGuiTextFilter_TextRange() {
    assert_eq!(::std::mem::size_of::<ImGuiTextFilter_TextRange>(), 16usize, concat!( "Size of: " , stringify ! ( ImGuiTextFilter_TextRange ) ));
    assert_eq!(::std::mem::align_of::<ImGuiTextFilter_TextRange>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiTextFilter_TextRange ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextFilter_TextRange>())).b as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextFilter_TextRange ) , "::" , stringify ! ( b ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextFilter_TextRange>())).e as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextFilter_TextRange ) , "::" , stringify ! ( e ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilter9TextRange5splitEcR8ImVectorIS0_E"]
    pub fn ImGuiTextFilter_TextRange_split(this: *mut ImGuiTextFilter_TextRange, separator: ::std::os::raw::c_char, out: *mut ImVector<ImGuiTextFilter_TextRange>);
}

impl ImGuiTextFilter_TextRange {
    #[inline]
    pub unsafe fn split(&mut self, separator: ::std::os::raw::c_char, out: *mut ImVector<ImGuiTextFilter_TextRange>) { ImGuiTextFilter_TextRange_split(self, separator, out) }
}

#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    assert_eq!(::std::mem::size_of::<ImGuiTextFilter>(), 280usize, concat!( "Size of: " , stringify ! ( ImGuiTextFilter ) ));
    assert_eq!(::std::mem::align_of::<ImGuiTextFilter>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiTextFilter ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).InputBuf as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( InputBuf ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).Filters as *const _ as usize }, 256usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( Filters ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).CountGrep as *const _ as usize }, 272usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextFilter ) , "::" , stringify ! ( CountGrep ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilter4DrawEPKcf"]
    pub fn ImGuiTextFilter_Draw(this: *mut ImGuiTextFilter, label: *const ::std::os::raw::c_char, width: f32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZNK15ImGuiTextFilter10PassFilterEPKcS1_"]
    pub fn ImGuiTextFilter_PassFilter(this: *const ImGuiTextFilter, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilter5BuildEv"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilterC1EPKc"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(this: *mut ImGuiTextFilter, default_filter: *const ::std::os::raw::c_char);
}

impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool { ImGuiTextFilter_Draw(self, label, width) }
    #[inline]
    pub unsafe fn PassFilter(&self, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char) -> bool { ImGuiTextFilter_PassFilter(self, text, text_end) }
    #[inline]
    pub unsafe fn Build(&mut self) { ImGuiTextFilter_Build(self) }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImGuiTextFilter_ImGuiTextFilter(&mut __bindgen_tmp, default_filter);
        __bindgen_tmp
    }
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiTextBuffer { pub Buf: ImVector<::std::os::raw::c_char> }

#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    assert_eq!(::std::mem::size_of::<ImGuiTextBuffer>(), 16usize, concat!( "Size of: " , stringify ! ( ImGuiTextBuffer ) ));
    assert_eq!(::std::mem::align_of::<ImGuiTextBuffer>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiTextBuffer ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextBuffer>())).Buf as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextBuffer ) , "::" , stringify ! ( Buf ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer7appendfEPKcz"]
    pub fn ImGuiTextBuffer_appendf(this: *mut ImGuiTextBuffer, fmt: *const ::std::os::raw::c_char, ...);
}

extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer8appendfvEPKcP13__va_list_tag"]
    pub fn ImGuiTextBuffer_appendfv(this: *mut ImGuiTextBuffer, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}

impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn appendfv(&mut self, fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag) { ImGuiTextBuffer_appendfv(self, fmt, args) }
}

#[repr(C)]
pub struct ImGuiStorage { pub Data: ImVector<ImGuiStorage_Pair> }

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStorage_Pair { pub key: ImGuiID, pub __bindgen_anon_1: ImGuiStorage_Pair__bindgen_ty_1 }

#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStorage_Pair__bindgen_ty_1 { pub val_i: ::std::os::raw::c_int, pub val_f: f32, pub val_p: *mut ::std::os::raw::c_void, _bindgen_union_align: u64 }

#[test]
fn bindgen_test_layout_ImGuiStorage_Pair__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<ImGuiStorage_Pair__bindgen_ty_1>(), 8usize, concat!( "Size of: " , stringify ! ( ImGuiStorage_Pair__bindgen_ty_1 ) ));
    assert_eq!(::std::mem::align_of::<ImGuiStorage_Pair__bindgen_ty_1>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiStorage_Pair__bindgen_ty_1 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStorage_Pair__bindgen_ty_1>())).val_i as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStorage_Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_i ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStorage_Pair__bindgen_ty_1>())).val_f as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStorage_Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_f ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStorage_Pair__bindgen_ty_1>())).val_p as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStorage_Pair__bindgen_ty_1 ) , "::" , stringify ! ( val_p ) ));
}

#[test]
fn bindgen_test_layout_ImGuiStorage_Pair() {
    assert_eq!(::std::mem::size_of::<ImGuiStorage_Pair>(), 16usize, concat!( "Size of: " , stringify ! ( ImGuiStorage_Pair ) ));
    assert_eq!(::std::mem::align_of::<ImGuiStorage_Pair>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiStorage_Pair ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStorage_Pair>())).key as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStorage_Pair ) , "::" , stringify ! ( key ) ));
}

#[test]
fn bindgen_test_layout_ImGuiStorage() {
    assert_eq!(::std::mem::size_of::<ImGuiStorage>(), 16usize, concat!( "Size of: " , stringify ! ( ImGuiStorage ) ));
    assert_eq!(::std::mem::align_of::<ImGuiStorage>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiStorage ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiStorage>())).Data as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiStorage ) , "::" , stringify ! ( Data ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage6GetIntEji"]
    pub fn ImGuiStorage_GetInt(this: *const ImGuiStorage, key: ImGuiID, default_val: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage6SetIntEji"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage7GetBoolEjb"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage7SetBoolEjb"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage8GetFloatEjf"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage8SetFloatEjf"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage10GetVoidPtrEj"]
    pub fn ImGuiStorage_GetVoidPtr(this: *const ImGuiStorage, key: ImGuiID) -> *mut ::std::os::raw::c_void;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage10SetVoidPtrEjPv"]
    pub fn ImGuiStorage_SetVoidPtr(this: *mut ImGuiStorage, key: ImGuiID, val: *mut ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage9GetIntRefEji"]
    pub fn ImGuiStorage_GetIntRef(this: *mut ImGuiStorage, key: ImGuiID, default_val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage10GetBoolRefEjb"]
    pub fn ImGuiStorage_GetBoolRef(this: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> *mut bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage11GetFloatRefEjf"]
    pub fn ImGuiStorage_GetFloatRef(this: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> *mut f32;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage13GetVoidPtrRefEjPv"]
    pub fn ImGuiStorage_GetVoidPtrRef(this: *mut ImGuiStorage, key: ImGuiID, default_val: *mut ::std::os::raw::c_void) -> *mut *mut ::std::os::raw::c_void;
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage9SetAllIntEi"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage14BuildSortByKeyEv"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}

impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(&self, key: ImGuiID, default_val: ::std::os::raw::c_int) -> ::std::os::raw::c_int { ImGuiStorage_GetInt(self, key, default_val) }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) { ImGuiStorage_SetInt(self, key, val) }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool { ImGuiStorage_GetBool(self, key, default_val) }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) { ImGuiStorage_SetBool(self, key, val) }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 { ImGuiStorage_GetFloat(self, key, default_val) }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) { ImGuiStorage_SetFloat(self, key, val) }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void { ImGuiStorage_GetVoidPtr(self, key) }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) { ImGuiStorage_SetVoidPtr(self, key, val) }
    #[inline]
    pub unsafe fn GetIntRef(&mut self, key: ImGuiID, default_val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int { ImGuiStorage_GetIntRef(self, key, default_val) }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool { ImGuiStorage_GetBoolRef(self, key, default_val) }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 { ImGuiStorage_GetFloatRef(self, key, default_val) }
    #[inline]
    pub unsafe fn GetVoidPtrRef(&mut self, key: ImGuiID, default_val: *mut ::std::os::raw::c_void) -> *mut *mut ::std::os::raw::c_void { ImGuiStorage_GetVoidPtrRef(self, key, default_val) }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) { ImGuiStorage_SetAllInt(self, val) }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) { ImGuiStorage_BuildSortByKey(self) }
}

#[repr(C)]
pub struct ImGuiTextEditCallbackData { pub EventFlag: ImGuiInputTextFlags, pub Flags: ImGuiInputTextFlags, pub UserData: *mut ::std::os::raw::c_void, pub ReadOnly: bool, pub EventChar: ImWchar, pub EventKey: ImGuiKey, pub Buf: *mut ::std::os::raw::c_char, pub BufTextLen: ::std::os::raw::c_int, pub BufSize: ::std::os::raw::c_int, pub BufDirty: bool, pub CursorPos: ::std::os::raw::c_int, pub SelectionStart: ::std::os::raw::c_int, pub SelectionEnd: ::std::os::raw::c_int }

#[test]
fn bindgen_test_layout_ImGuiTextEditCallbackData() {
    assert_eq!(::std::mem::size_of::<ImGuiTextEditCallbackData>(), 56usize, concat!( "Size of: " , stringify ! ( ImGuiTextEditCallbackData ) ));
    assert_eq!(::std::mem::align_of::<ImGuiTextEditCallbackData>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiTextEditCallbackData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).EventFlag as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( EventFlag ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).Flags as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( Flags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).UserData as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( UserData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).ReadOnly as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( ReadOnly ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).EventChar as *const _ as usize }, 18usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( EventChar ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).EventKey as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( EventKey ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).Buf as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( Buf ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).BufTextLen as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( BufTextLen ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).BufSize as *const _ as usize }, 36usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( BufSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).BufDirty as *const _ as usize }, 40usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( BufDirty ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).CursorPos as *const _ as usize }, 44usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( CursorPos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).SelectionStart as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( SelectionStart ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiTextEditCallbackData>())).SelectionEnd as *const _ as usize }, 52usize, concat!( "Offset of field: " , stringify ! ( ImGuiTextEditCallbackData ) , "::" , stringify ! ( SelectionEnd ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN25ImGuiTextEditCallbackData11DeleteCharsEii"]
    pub fn ImGuiTextEditCallbackData_DeleteChars(this: *mut ImGuiTextEditCallbackData, pos: ::std::os::raw::c_int, bytes_count: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN25ImGuiTextEditCallbackData11InsertCharsEiPKcS1_"]
    pub fn ImGuiTextEditCallbackData_InsertChars(this: *mut ImGuiTextEditCallbackData, pos: ::std::os::raw::c_int, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char);
}

impl ImGuiTextEditCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(&mut self, pos: ::std::os::raw::c_int, bytes_count: ::std::os::raw::c_int) { ImGuiTextEditCallbackData_DeleteChars(self, pos, bytes_count) }
    #[inline]
    pub unsafe fn InsertChars(&mut self, pos: ::std::os::raw::c_int, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char) { ImGuiTextEditCallbackData_InsertChars(self, pos, text, text_end) }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiSizeCallbackData { pub UserData: *mut ::std::os::raw::c_void, pub Pos: ImVec2, pub CurrentSize: ImVec2, pub DesiredSize: ImVec2 }

#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    assert_eq!(::std::mem::size_of::<ImGuiSizeCallbackData>(), 32usize, concat!( "Size of: " , stringify ! ( ImGuiSizeCallbackData ) ));
    assert_eq!(::std::mem::align_of::<ImGuiSizeCallbackData>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiSizeCallbackData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).UserData as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( UserData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).Pos as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( Pos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).CurrentSize as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( CurrentSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).DesiredSize as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImGuiSizeCallbackData ) , "::" , stringify ! ( DesiredSize ) ));
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiPayload { pub Data: *mut ::std::os::raw::c_void, pub DataSize: ::std::os::raw::c_int, pub SourceId: ImGuiID, pub SourceParentId: ImGuiID, pub DataFrameCount: ::std::os::raw::c_int, pub DataType: [::std::os::raw::c_char; 33usize], pub Preview: bool, pub Delivery: bool }

#[test]
fn bindgen_test_layout_ImGuiPayload() {
    assert_eq!(::std::mem::size_of::<ImGuiPayload>(), 64usize, concat!( "Size of: " , stringify ! ( ImGuiPayload ) ));
    assert_eq!(::std::mem::align_of::<ImGuiPayload>(), 8usize, concat!( "Alignment of " , stringify ! ( ImGuiPayload ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Data as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Data ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataSize as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceId as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( SourceId ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceParentId as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( SourceParentId ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataFrameCount as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataFrameCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataType as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( DataType ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Preview as *const _ as usize }, 57usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Preview ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Delivery as *const _ as usize }, 58usize, concat!( "Offset of field: " , stringify ! ( ImGuiPayload ) , "::" , stringify ! ( Delivery ) ));
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImColor { pub Value: ImVec4 }

#[test]
fn bindgen_test_layout_ImColor() {
    assert_eq!(::std::mem::size_of::<ImColor>(), 16usize, concat!( "Size of: " , stringify ! ( ImColor ) ));
    assert_eq!(::std::mem::align_of::<ImColor>(), 4usize, concat!( "Alignment of " , stringify ! ( ImColor ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImColor>())).Value as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImColor ) , "::" , stringify ! ( Value ) ));
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiListClipper { pub StartPosY: f32, pub ItemsHeight: f32, pub ItemsCount: ::std::os::raw::c_int, pub StepNo: ::std::os::raw::c_int, pub DisplayStart: ::std::os::raw::c_int, pub DisplayEnd: ::std::os::raw::c_int }

#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    assert_eq!(::std::mem::size_of::<ImGuiListClipper>(), 24usize, concat!( "Size of: " , stringify ! ( ImGuiListClipper ) ));
    assert_eq!(::std::mem::align_of::<ImGuiListClipper>(), 4usize, concat!( "Alignment of " , stringify ! ( ImGuiListClipper ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StartPosY as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( StartPosY ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsHeight as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( ItemsHeight ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsCount as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( ItemsCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StepNo as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( StepNo ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayStart as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( DisplayStart ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayEnd as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImGuiListClipper ) , "::" , stringify ! ( DisplayEnd ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper4StepEv"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper5BeginEif"]
    pub fn ImGuiListClipper_Begin(this: *mut ImGuiListClipper, items_count: ::std::os::raw::c_int, items_height: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper3EndEv"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}

impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Step(&mut self) -> bool { ImGuiListClipper_Step(self) }
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) { ImGuiListClipper_Begin(self, items_count, items_height) }
    #[inline]
    pub unsafe fn End(&mut self) { ImGuiListClipper_End(self) }
}

pub type ImDrawCallback = ::std::option::Option<unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd)>;

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawCmd { pub ElemCount: ::std::os::raw::c_uint, pub ClipRect: ImVec4, pub TextureId: ImTextureID, pub UserCallback: ImDrawCallback, pub UserCallbackData: *mut ::std::os::raw::c_void }

#[test]
fn bindgen_test_layout_ImDrawCmd() {
    assert_eq!(::std::mem::size_of::<ImDrawCmd>(), 48usize, concat!( "Size of: " , stringify ! ( ImDrawCmd ) ));
    assert_eq!(::std::mem::align_of::<ImDrawCmd>(), 8usize, concat!( "Alignment of " , stringify ! ( ImDrawCmd ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ElemCount as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( ElemCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ClipRect as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( ClipRect ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).TextureId as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( TextureId ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallback as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( UserCallback ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallbackData as *const _ as usize }, 40usize, concat!( "Offset of field: " , stringify ! ( ImDrawCmd ) , "::" , stringify ! ( UserCallbackData ) ));
}

pub type ImDrawIdx = ::std::os::raw::c_ushort;

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawVert { pub pos: ImVec2, pub uv: ImVec2, pub col: ImU32 }

#[test]
fn bindgen_test_layout_ImDrawVert() {
    assert_eq!(::std::mem::size_of::<ImDrawVert>(), 20usize, concat!( "Size of: " , stringify ! ( ImDrawVert ) ));
    assert_eq!(::std::mem::align_of::<ImDrawVert>(), 4usize, concat!( "Alignment of " , stringify ! ( ImDrawVert ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawVert>())).pos as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( pos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawVert>())).uv as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( uv ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawVert>())).col as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImDrawVert ) , "::" , stringify ! ( col ) ));
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawChannel { pub CmdBuffer: ImVector<ImDrawCmd>, pub IdxBuffer: ImVector<ImDrawIdx> }

#[test]
fn bindgen_test_layout_ImDrawChannel() {
    assert_eq!(::std::mem::size_of::<ImDrawChannel>(), 32usize, concat!( "Size of: " , stringify ! ( ImDrawChannel ) ));
    assert_eq!(::std::mem::align_of::<ImDrawChannel>(), 8usize, concat!( "Alignment of " , stringify ! ( ImDrawChannel ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawChannel>())).CmdBuffer as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImDrawChannel ) , "::" , stringify ! ( CmdBuffer ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawChannel>())).IdxBuffer as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImDrawChannel ) , "::" , stringify ! ( IdxBuffer ) ));
}

impl ImDrawCornerFlags_ { pub const TopLeft: ImDrawCornerFlags_ = ImDrawCornerFlags_(1); }

impl ImDrawCornerFlags_ { pub const TopRight: ImDrawCornerFlags_ = ImDrawCornerFlags_(2); }

impl ImDrawCornerFlags_ { pub const BotLeft: ImDrawCornerFlags_ = ImDrawCornerFlags_(4); }

impl ImDrawCornerFlags_ { pub const BotRight: ImDrawCornerFlags_ = ImDrawCornerFlags_(8); }

impl ImDrawCornerFlags_ { pub const Top: ImDrawCornerFlags_ = ImDrawCornerFlags_(3); }

impl ImDrawCornerFlags_ { pub const Bot: ImDrawCornerFlags_ = ImDrawCornerFlags_(12); }

impl ImDrawCornerFlags_ { pub const Left: ImDrawCornerFlags_ = ImDrawCornerFlags_(5); }

impl ImDrawCornerFlags_ { pub const Right: ImDrawCornerFlags_ = ImDrawCornerFlags_(10); }

impl ImDrawCornerFlags_ { pub const All: ImDrawCornerFlags_ = ImDrawCornerFlags_(15); }

impl ::std::ops::BitOr<ImDrawCornerFlags_> for ImDrawCornerFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImDrawCornerFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImDrawCornerFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImDrawCornerFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImDrawCornerFlags_> for ImDrawCornerFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImDrawCornerFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImDrawCornerFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImDrawCornerFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImDrawCornerFlags_(pub u32);

impl ImDrawListFlags_ { pub const AntiAliasedLines: ImDrawListFlags_ = ImDrawListFlags_(1); }

impl ImDrawListFlags_ { pub const AntiAliasedFill: ImDrawListFlags_ = ImDrawListFlags_(2); }

impl ::std::ops::BitOr<ImDrawListFlags_> for ImDrawListFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImDrawListFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImDrawListFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImDrawListFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImDrawListFlags_> for ImDrawListFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImDrawListFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImDrawListFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImDrawListFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImDrawListFlags_(pub u32);

#[repr(C)]
pub struct ImDrawList { pub CmdBuffer: ImVector<ImDrawCmd>, pub IdxBuffer: ImVector<ImDrawIdx>, pub VtxBuffer: ImVector<ImDrawVert>, pub Flags: ImDrawListFlags, pub _Data: *const ImDrawListSharedData, pub _OwnerName: *const ::std::os::raw::c_char, pub _VtxCurrentIdx: ::std::os::raw::c_uint, pub _VtxWritePtr: *mut ImDrawVert, pub _IdxWritePtr: *mut ImDrawIdx, pub _ClipRectStack: ImVector<ImVec4>, pub _TextureIdStack: ImVector<ImTextureID>, pub _Path: ImVector<ImVec2>, pub _ChannelsCurrent: ::std::os::raw::c_int, pub _ChannelsCount: ::std::os::raw::c_int, pub _Channels: ImVector<ImDrawChannel> }

#[test]
fn bindgen_test_layout_ImDrawList() {
    assert_eq!(::std::mem::size_of::<ImDrawList>(), 168usize, concat!( "Size of: " , stringify ! ( ImDrawList ) ));
    assert_eq!(::std::mem::align_of::<ImDrawList>(), 8usize, concat!( "Alignment of " , stringify ! ( ImDrawList ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>())).CmdBuffer as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( CmdBuffer ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>())).IdxBuffer as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( IdxBuffer ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>())).VtxBuffer as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( VtxBuffer ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>())).Flags as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( Flags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Data as *const _ as usize }, 56usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Data ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._OwnerName as *const _ as usize }, 64usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _OwnerName ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentIdx as *const _ as usize }, 72usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _VtxCurrentIdx ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxWritePtr as *const _ as usize }, 80usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _VtxWritePtr ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._IdxWritePtr as *const _ as usize }, 88usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _IdxWritePtr ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ClipRectStack as *const _ as usize }, 96usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ClipRectStack ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._TextureIdStack as *const _ as usize }, 112usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _TextureIdStack ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Path as *const _ as usize }, 128usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Path ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ChannelsCurrent as *const _ as usize }, 144usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ChannelsCurrent ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ChannelsCount as *const _ as usize }, 148usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _ChannelsCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Channels as *const _ as usize }, 152usize, concat!( "Offset of field: " , stringify ! ( ImDrawList ) , "::" , stringify ! ( _Channels ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12PushClipRectE6ImVec2S0_b"]
    pub fn ImDrawList_PushClipRect(this: *mut ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList22PushClipRectFullScreenEv"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11PopClipRectEv"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13PushTextureIDEPv"]
    pub fn ImDrawList_PushTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12PopTextureIDEv"]
    pub fn ImDrawList_PopTextureID(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddLineERK6ImVec2S2_jf"]
    pub fn ImDrawList_AddLine(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, col: ImU32, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif"]
    pub fn ImDrawList_AddRect(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi"]
    pub fn ImDrawList_AddRectFilled(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj"]
    pub fn ImDrawList_AddRectFilledMultiColor(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf"]
    pub fn ImDrawList_AddQuad(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, col: ImU32, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_AddQuadFilled(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf"]
    pub fn ImDrawList_AddTriangle(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, col: ImU32, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j"]
    pub fn ImDrawList_AddTriangleFilled(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList9AddCircleERK6ImVec2fjif"]
    pub fn ImDrawList_AddCircle(this: *mut ImDrawList, centre: *const ImVec2, radius: f32, col: ImU32, num_segments: ::std::os::raw::c_int, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15AddCircleFilledERK6ImVec2fji"]
    pub fn ImDrawList_AddCircleFilled(this: *mut ImDrawList, centre: *const ImVec2, radius: f32, col: ImU32, num_segments: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_"]
    pub fn ImDrawList_AddText(this: *mut ImDrawList, pos: *const ImVec2, col: ImU32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4"]
    pub fn ImDrawList_AddText1(this: *mut ImDrawList, font: *const ImFont, font_size: f32, pos: *const ImVec2, col: ImU32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32, cpu_fine_clip_rect: *const ImVec4);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j"]
    pub fn ImDrawList_AddImage(this: *mut ImDrawList, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12AddImageQuadEPvRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j"]
    pub fn ImDrawList_AddImageQuad(this: *mut ImDrawList, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15AddImageRoundedEPvRK6ImVec2S3_S3_S3_jfi"]
    pub fn ImDrawList_AddImageRounded(this: *mut ImDrawList, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf"]
    pub fn ImDrawList_AddPolyline(this: *mut ImDrawList, points: *const ImVec2, num_points: ::std::os::raw::c_int, col: ImU32, closed: bool, thickness: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij"]
    pub fn ImDrawList_AddConvexPolyFilled(this: *mut ImDrawList, points: *const ImVec2, num_points: ::std::os::raw::c_int, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList14AddBezierCurveERK6ImVec2S2_S2_S2_jfi"]
    pub fn ImDrawList_AddBezierCurve(this: *mut ImDrawList, pos0: *const ImVec2, cp0: *const ImVec2, cp1: *const ImVec2, pos1: *const ImVec2, col: ImU32, thickness: f32, num_segments: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList9PathArcToERK6ImVec2fffi"]
    pub fn ImDrawList_PathArcTo(this: *mut ImDrawList, centre: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13PathArcToFastERK6ImVec2fii"]
    pub fn ImDrawList_PathArcToFast(this: *mut ImDrawList, centre: *const ImVec2, radius: f32, a_min_of_12: ::std::os::raw::c_int, a_max_of_12: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17PathBezierCurveToERK6ImVec2S2_S2_i"]
    pub fn ImDrawList_PathBezierCurveTo(this: *mut ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, num_segments: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8PathRectERK6ImVec2S2_fi"]
    pub fn ImDrawList_PathRect(this: *mut ImDrawList, rect_min: *const ImVec2, rect_max: *const ImVec2, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13ChannelsSplitEi"]
    pub fn ImDrawList_ChannelsSplit(this: *mut ImDrawList, channels_count: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13ChannelsMergeEv"]
    pub fn ImDrawList_ChannelsMerge(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList18ChannelsSetCurrentEi"]
    pub fn ImDrawList_ChannelsSetCurrent(this: *mut ImDrawList, channel_index: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPv"]
    pub fn ImDrawList_AddCallback(this: *mut ImDrawList, callback: ImDrawCallback, callback_data: *mut ::std::os::raw::c_void);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10AddDrawCmdEv"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZNK10ImDrawList11CloneOutputEv"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList5ClearEv"]
    pub fn ImDrawList_Clear(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15ClearFreeMemoryEv"]
    pub fn ImDrawList_ClearFreeMemory(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11PrimReserveEii"]
    pub fn ImDrawList_PrimReserve(this: *mut ImDrawList, idx_count: ::std::os::raw::c_int, vtx_count: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8PrimRectERK6ImVec2S2_j"]
    pub fn ImDrawList_PrimRect(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_PrimRectUV(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j"]
    pub fn ImDrawList_PrimQuadUV(this: *mut ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: ImU32);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList14UpdateClipRectEv"]
    pub fn ImDrawList_UpdateClipRect(this: *mut ImDrawList);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15UpdateTextureIDEv"]
    pub fn ImDrawList_UpdateTextureID(this: *mut ImDrawList);
}

impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(&mut self, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool) { ImDrawList_PushClipRect(self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) { ImDrawList_PushClipRectFullScreen(self) }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) { ImDrawList_PopClipRect(self) }
    #[inline]
    pub unsafe fn PushTextureID(&mut self, texture_id: ImTextureID) { ImDrawList_PushTextureID(self, texture_id) }
    #[inline]
    pub unsafe fn PopTextureID(&mut self) { ImDrawList_PopTextureID(self) }
    #[inline]
    pub unsafe fn AddLine(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32, thickness: f32) { ImDrawList_AddLine(self, a, b, col, thickness) }
    #[inline]
    pub unsafe fn AddRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int, thickness: f32) { ImDrawList_AddRect(self, a, b, col, rounding, rounding_corners_flags, thickness) }
    #[inline]
    pub unsafe fn AddRectFilled(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int) { ImDrawList_AddRectFilled(self, a, b, col, rounding, rounding_corners_flags) }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(&mut self, a: *const ImVec2, b: *const ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32) { ImDrawList_AddRectFilledMultiColor(self, a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left) }
    #[inline]
    pub unsafe fn AddQuad(&mut self, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, col: ImU32, thickness: f32) { ImDrawList_AddQuad(self, a, b, c, d, col, thickness) }
    #[inline]
    pub unsafe fn AddQuadFilled(&mut self, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, col: ImU32) { ImDrawList_AddQuadFilled(self, a, b, c, d, col) }
    #[inline]
    pub unsafe fn AddTriangle(&mut self, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, col: ImU32, thickness: f32) { ImDrawList_AddTriangle(self, a, b, c, col, thickness) }
    #[inline]
    pub unsafe fn AddTriangleFilled(&mut self, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, col: ImU32) { ImDrawList_AddTriangleFilled(self, a, b, c, col) }
    #[inline]
    pub unsafe fn AddCircle(&mut self, centre: *const ImVec2, radius: f32, col: ImU32, num_segments: ::std::os::raw::c_int, thickness: f32) { ImDrawList_AddCircle(self, centre, radius, col, num_segments, thickness) }
    #[inline]
    pub unsafe fn AddCircleFilled(&mut self, centre: *const ImVec2, radius: f32, col: ImU32, num_segments: ::std::os::raw::c_int) { ImDrawList_AddCircleFilled(self, centre, radius, col, num_segments) }
    #[inline]
    pub unsafe fn AddText(&mut self, pos: *const ImVec2, col: ImU32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char) { ImDrawList_AddText(self, pos, col, text_begin, text_end) }
    #[inline]
    pub unsafe fn AddText1(&mut self, font: *const ImFont, font_size: f32, pos: *const ImVec2, col: ImU32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32, cpu_fine_clip_rect: *const ImVec4) { ImDrawList_AddText1(self, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect) }
    #[inline]
    pub unsafe fn AddImage(&mut self, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32) { ImDrawList_AddImage(self, user_texture_id, a, b, uv_a, uv_b, col) }
    #[inline]
    pub unsafe fn AddImageQuad(&mut self, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: ImU32) { ImDrawList_AddImageQuad(self, user_texture_id, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) }
    #[inline]
    pub unsafe fn AddImageRounded(&mut self, user_texture_id: ImTextureID, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32, rounding: f32, rounding_corners: ::std::os::raw::c_int) { ImDrawList_AddImageRounded(self, user_texture_id, a, b, uv_a, uv_b, col, rounding, rounding_corners) }
    #[inline]
    pub unsafe fn AddPolyline(&mut self, points: *const ImVec2, num_points: ::std::os::raw::c_int, col: ImU32, closed: bool, thickness: f32) { ImDrawList_AddPolyline(self, points, num_points, col, closed, thickness) }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(&mut self, points: *const ImVec2, num_points: ::std::os::raw::c_int, col: ImU32) { ImDrawList_AddConvexPolyFilled(self, points, num_points, col) }
    #[inline]
    pub unsafe fn AddBezierCurve(&mut self, pos0: *const ImVec2, cp0: *const ImVec2, cp1: *const ImVec2, pos1: *const ImVec2, col: ImU32, thickness: f32, num_segments: ::std::os::raw::c_int) { ImDrawList_AddBezierCurve(self, pos0, cp0, cp1, pos1, col, thickness, num_segments) }
    #[inline]
    pub unsafe fn PathArcTo(&mut self, centre: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: ::std::os::raw::c_int) { ImDrawList_PathArcTo(self, centre, radius, a_min, a_max, num_segments) }
    #[inline]
    pub unsafe fn PathArcToFast(&mut self, centre: *const ImVec2, radius: f32, a_min_of_12: ::std::os::raw::c_int, a_max_of_12: ::std::os::raw::c_int) { ImDrawList_PathArcToFast(self, centre, radius, a_min_of_12, a_max_of_12) }
    #[inline]
    pub unsafe fn PathBezierCurveTo(&mut self, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, num_segments: ::std::os::raw::c_int) { ImDrawList_PathBezierCurveTo(self, p1, p2, p3, num_segments) }
    #[inline]
    pub unsafe fn PathRect(&mut self, rect_min: *const ImVec2, rect_max: *const ImVec2, rounding: f32, rounding_corners_flags: ::std::os::raw::c_int) { ImDrawList_PathRect(self, rect_min, rect_max, rounding, rounding_corners_flags) }
    #[inline]
    pub unsafe fn ChannelsSplit(&mut self, channels_count: ::std::os::raw::c_int) { ImDrawList_ChannelsSplit(self, channels_count) }
    #[inline]
    pub unsafe fn ChannelsMerge(&mut self) { ImDrawList_ChannelsMerge(self) }
    #[inline]
    pub unsafe fn ChannelsSetCurrent(&mut self, channel_index: ::std::os::raw::c_int) { ImDrawList_ChannelsSetCurrent(self, channel_index) }
    #[inline]
    pub unsafe fn AddCallback(&mut self, callback: ImDrawCallback, callback_data: *mut ::std::os::raw::c_void) { ImDrawList_AddCallback(self, callback, callback_data) }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) { ImDrawList_AddDrawCmd(self) }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList { ImDrawList_CloneOutput(self) }
    #[inline]
    pub unsafe fn Clear(&mut self) { ImDrawList_Clear(self) }
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) { ImDrawList_ClearFreeMemory(self) }
    #[inline]
    pub unsafe fn PrimReserve(&mut self, idx_count: ::std::os::raw::c_int, vtx_count: ::std::os::raw::c_int) { ImDrawList_PrimReserve(self, idx_count, vtx_count) }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) { ImDrawList_PrimRect(self, a, b, col) }
    #[inline]
    pub unsafe fn PrimRectUV(&mut self, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: ImU32) { ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col) }
    #[inline]
    pub unsafe fn PrimQuadUV(&mut self, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: ImU32) { ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) }
    #[inline]
    pub unsafe fn UpdateClipRect(&mut self) { ImDrawList_UpdateClipRect(self) }
    #[inline]
    pub unsafe fn UpdateTextureID(&mut self) { ImDrawList_UpdateTextureID(self) }
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawData { pub Valid: bool, pub CmdLists: *mut *mut ImDrawList, pub CmdListsCount: ::std::os::raw::c_int, pub TotalIdxCount: ::std::os::raw::c_int, pub TotalVtxCount: ::std::os::raw::c_int, pub DisplayPos: ImVec2, pub DisplaySize: ImVec2 }

#[test]
fn bindgen_test_layout_ImDrawData() {
    assert_eq!(::std::mem::size_of::<ImDrawData>(), 48usize, concat!( "Size of: " , stringify ! ( ImDrawData ) ));
    assert_eq!(::std::mem::align_of::<ImDrawData>(), 8usize, concat!( "Alignment of " , stringify ! ( ImDrawData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).Valid as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( Valid ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdLists as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( CmdLists ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdListsCount as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( CmdListsCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalIdxCount as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( TotalIdxCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalVtxCount as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( TotalVtxCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplayPos as *const _ as usize }, 28usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( DisplayPos ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplaySize as *const _ as usize }, 36usize, concat!( "Offset of field: " , stringify ! ( ImDrawData ) , "::" , stringify ! ( DisplaySize ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData17DeIndexAllBuffersEv"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}

extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData14ScaleClipRectsERK6ImVec2"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, sc: *const ImVec2);
}

impl ImDrawData {
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) { ImDrawData_DeIndexAllBuffers(self) }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, sc: *const ImVec2) { ImDrawData_ScaleClipRects(self, sc) }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontConfig { pub FontData: *mut ::std::os::raw::c_void, pub FontDataSize: ::std::os::raw::c_int, pub FontDataOwnedByAtlas: bool, pub FontNo: ::std::os::raw::c_int, pub SizePixels: f32, pub OversampleH: ::std::os::raw::c_int, pub OversampleV: ::std::os::raw::c_int, pub PixelSnapH: bool, pub GlyphExtraSpacing: ImVec2, pub GlyphOffset: ImVec2, pub GlyphRanges: *const ImWchar, pub GlyphMinAdvanceX: f32, pub GlyphMaxAdvanceX: f32, pub MergeMode: bool, pub RasterizerFlags: ::std::os::raw::c_uint, pub RasterizerMultiply: f32, pub Name: [::std::os::raw::c_char; 40usize], pub DstFont: *mut ImFont }

#[test]
fn bindgen_test_layout_ImFontConfig() {
    assert_eq!(::std::mem::size_of::<ImFontConfig>(), 136usize, concat!( "Size of: " , stringify ! ( ImFontConfig ) ));
    assert_eq!(::std::mem::align_of::<ImFontConfig>(), 8usize, concat!( "Alignment of " , stringify ! ( ImFontConfig ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontData as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataSize as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontDataSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataOwnedByAtlas as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontDataOwnedByAtlas ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontNo as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( FontNo ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).SizePixels as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( SizePixels ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleH as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( OversampleH ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleV as *const _ as usize }, 28usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( OversampleV ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).PixelSnapH as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( PixelSnapH ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphExtraSpacing as *const _ as usize }, 36usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphExtraSpacing ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphOffset as *const _ as usize }, 44usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphOffset ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphRanges as *const _ as usize }, 56usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphRanges ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMinAdvanceX as *const _ as usize }, 64usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphMinAdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMaxAdvanceX as *const _ as usize }, 68usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( GlyphMaxAdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).MergeMode as *const _ as usize }, 72usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( MergeMode ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerFlags as *const _ as usize }, 76usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( RasterizerFlags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerMultiply as *const _ as usize }, 80usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( RasterizerMultiply ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).Name as *const _ as usize }, 84usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( Name ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontConfig>())).DstFont as *const _ as usize }, 128usize, concat!( "Offset of field: " , stringify ! ( ImFontConfig ) , "::" , stringify ! ( DstFont ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN12ImFontConfigC1Ev"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}

impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImFontConfig_ImFontConfig(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontGlyph { pub Codepoint: ImWchar, pub AdvanceX: f32, pub X0: f32, pub Y0: f32, pub X1: f32, pub Y1: f32, pub U0: f32, pub V0: f32, pub U1: f32, pub V1: f32 }

#[test]
fn bindgen_test_layout_ImFontGlyph() {
    assert_eq!(::std::mem::size_of::<ImFontGlyph>(), 40usize, concat!( "Size of: " , stringify ! ( ImFontGlyph ) ));
    assert_eq!(::std::mem::align_of::<ImFontGlyph>(), 4usize, concat!( "Alignment of " , stringify ! ( ImFontGlyph ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Codepoint as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Codepoint ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).AdvanceX as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( AdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X0 as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( X0 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y0 as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Y0 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X1 as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( X1 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y1 as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( Y1 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U0 as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( U0 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V0 as *const _ as usize }, 28usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( V0 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U1 as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( U1 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V1 as *const _ as usize }, 36usize, concat!( "Offset of field: " , stringify ! ( ImFontGlyph ) , "::" , stringify ! ( V1 ) ));
}

impl ImFontAtlasFlags_ { pub const NoPowerOfTwoHeight: ImFontAtlasFlags_ = ImFontAtlasFlags_(1); }

impl ImFontAtlasFlags_ { pub const NoMouseCursors: ImFontAtlasFlags_ = ImFontAtlasFlags_(2); }

impl ::std::ops::BitOr<ImFontAtlasFlags_> for ImFontAtlasFlags_ {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { ImFontAtlasFlags_(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for ImFontAtlasFlags_ {
    #[inline]
    fn bitor_assign(&mut self, rhs: ImFontAtlasFlags_) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<ImFontAtlasFlags_> for ImFontAtlasFlags_ {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { ImFontAtlasFlags_(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for ImFontAtlasFlags_ {
    #[inline]
    fn bitand_assign(&mut self, rhs: ImFontAtlasFlags_) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct ImFontAtlasFlags_(pub u32);

#[repr(C)]
pub struct ImFontAtlas { pub Flags: ImFontAtlasFlags, pub TexID: ImTextureID, pub TexDesiredWidth: ::std::os::raw::c_int, pub TexGlyphPadding: ::std::os::raw::c_int, pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar, pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint, pub TexWidth: ::std::os::raw::c_int, pub TexHeight: ::std::os::raw::c_int, pub TexUvScale: ImVec2, pub TexUvWhitePixel: ImVec2, pub Fonts: ImVector<*mut ImFont>, pub CustomRects: ImVector<ImFontAtlas_CustomRect>, pub ConfigData: ImVector<ImFontConfig>, pub CustomRectIds: [::std::os::raw::c_int; 1usize] }

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImFontAtlas_GlyphRangesBuilder { pub UsedChars: ImVector<::std::os::raw::c_uchar> }

#[test]
fn bindgen_test_layout_ImFontAtlas_GlyphRangesBuilder() {
    assert_eq!(::std::mem::size_of::<ImFontAtlas_GlyphRangesBuilder>(), 16usize, concat!( "Size of: " , stringify ! ( ImFontAtlas_GlyphRangesBuilder ) ));
    assert_eq!(::std::mem::align_of::<ImFontAtlas_GlyphRangesBuilder>(), 8usize, concat!( "Alignment of " , stringify ! ( ImFontAtlas_GlyphRangesBuilder ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_GlyphRangesBuilder>())).UsedChars as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_GlyphRangesBuilder ) , "::" , stringify ! ( UsedChars ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GlyphRangesBuilder7AddTextEPKcS2_"]
    pub fn ImFontAtlas_GlyphRangesBuilder_AddText(this: *mut ImFontAtlas_GlyphRangesBuilder, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GlyphRangesBuilder9AddRangesEPKt"]
    pub fn ImFontAtlas_GlyphRangesBuilder_AddRanges(this: *mut ImFontAtlas_GlyphRangesBuilder, ranges: *const ImWchar);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GlyphRangesBuilder11BuildRangesEP8ImVectorItE"]
    pub fn ImFontAtlas_GlyphRangesBuilder_BuildRanges(this: *mut ImFontAtlas_GlyphRangesBuilder, out_ranges: *mut ImVector<ImWchar>);
}

impl ImFontAtlas_GlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(&mut self, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char) { ImFontAtlas_GlyphRangesBuilder_AddText(self, text, text_end) }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) { ImFontAtlas_GlyphRangesBuilder_AddRanges(self, ranges) }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) { ImFontAtlas_GlyphRangesBuilder_BuildRanges(self, out_ranges) }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontAtlas_CustomRect { pub ID: ::std::os::raw::c_uint, pub Width: ::std::os::raw::c_ushort, pub Height: ::std::os::raw::c_ushort, pub X: ::std::os::raw::c_ushort, pub Y: ::std::os::raw::c_ushort, pub GlyphAdvanceX: f32, pub GlyphOffset: ImVec2, pub Font: *mut ImFont }

#[test]
fn bindgen_test_layout_ImFontAtlas_CustomRect() {
    assert_eq!(::std::mem::size_of::<ImFontAtlas_CustomRect>(), 32usize, concat!( "Size of: " , stringify ! ( ImFontAtlas_CustomRect ) ));
    assert_eq!(::std::mem::align_of::<ImFontAtlas_CustomRect>(), 8usize, concat!( "Alignment of " , stringify ! ( ImFontAtlas_CustomRect ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).ID as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( ID ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).Width as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( Width ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).Height as *const _ as usize }, 6usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( Height ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).X as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( X ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).Y as *const _ as usize }, 10usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( Y ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).GlyphAdvanceX as *const _ as usize }, 12usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( GlyphAdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).GlyphOffset as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( GlyphOffset ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas_CustomRect>())).Font as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas_CustomRect ) , "::" , stringify ! ( Font ) ));
}

#[test]
fn bindgen_test_layout_ImFontAtlas() {
    assert_eq!(::std::mem::size_of::<ImFontAtlas>(), 120usize, concat!( "Size of: " , stringify ! ( ImFontAtlas ) ));
    assert_eq!(::std::mem::align_of::<ImFontAtlas>(), 8usize, concat!( "Alignment of " , stringify ! ( ImFontAtlas ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Flags as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( Flags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexID as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexID ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexDesiredWidth as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexDesiredWidth ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexGlyphPadding as *const _ as usize }, 20usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexGlyphPadding ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsAlpha8 as *const _ as usize }, 24usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexPixelsAlpha8 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsRGBA32 as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexPixelsRGBA32 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexWidth as *const _ as usize }, 40usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexWidth ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexHeight as *const _ as usize }, 44usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexHeight ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvScale as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexUvScale ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvWhitePixel as *const _ as usize }, 56usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( TexUvWhitePixel ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Fonts as *const _ as usize }, 64usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( Fonts ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRects as *const _ as usize }, 80usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( CustomRects ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).ConfigData as *const _ as usize }, 96usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( ConfigData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRectIds as *const _ as usize }, 112usize, concat!( "Offset of field: " , stringify ! ( ImFontAtlas ) , "::" , stringify ! ( CustomRectIds ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas7AddFontEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFont(this: *mut ImFontAtlas, font_cfg: *const ImFontConfig) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFontDefault(this: *mut ImFontAtlas, font_cfg: *const ImFontConfig) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromFileTTF(this: *mut ImFontAtlas, filename: *const ::std::os::raw::c_char, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(this: *mut ImFontAtlas, font_data: *mut ::std::os::raw::c_void, font_size: ::std::os::raw::c_int, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(this: *mut ImFontAtlas, compressed_font_data: *const ::std::os::raw::c_void, compressed_font_size: ::std::os::raw::c_int, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(this: *mut ImFontAtlas, compressed_font_data_base85: *const ::std::os::raw::c_char, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas14ClearInputDataEv"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas12ClearTexDataEv"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas10ClearFontsEv"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas5ClearEv"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas5BuildEv"]
    pub fn ImFontAtlas_Build(this: *mut ImFontAtlas) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsAlpha8(this: *mut ImFontAtlas, out_pixels: *mut *mut ::std::os::raw::c_uchar, out_width: *mut ::std::os::raw::c_int, out_height: *mut ::std::os::raw::c_int, out_bytes_per_pixel: *mut ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsRGBA32(this: *mut ImFontAtlas, out_pixels: *mut *mut ::std::os::raw::c_uchar, out_width: *mut ::std::os::raw::c_int, out_height: *mut ::std::os::raw::c_int, out_bytes_per_pixel: *mut ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas21GetGlyphRangesDefaultEv"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20GetGlyphRangesKoreanEv"]
    pub fn ImFontAtlas_GetGlyphRangesKorean(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22GetGlyphRangesJapaneseEv"]
    pub fn ImFontAtlas_GetGlyphRangesJapanese(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas25GetGlyphRangesChineseFullEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22GetGlyphRangesCyrillicEv"]
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetGlyphRangesThaiEv"]
    pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut ImFontAtlas) -> *const ImWchar;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20AddCustomRectRegularEjii"]
    pub fn ImFontAtlas_AddCustomRectRegular(this: *mut ImFontAtlas, id: ::std::os::raw::c_uint, width: ::std::os::raw::c_int, height: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2"]
    pub fn ImFontAtlas_AddCustomRectFontGlyph(this: *mut ImFontAtlas, font: *mut ImFont, id: ImWchar, width: ::std::os::raw::c_int, height: ::std::os::raw::c_int, advance_x: f32, offset: *const ImVec2) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas16CalcCustomRectUVEPKNS_10CustomRectEP6ImVec2S4_"]
    pub fn ImFontAtlas_CalcCustomRectUV(this: *mut ImFontAtlas, rect: *const ImFontAtlas_CustomRect, out_uv_min: *mut ImVec2, out_uv_max: *mut ImVec2);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_"]
    pub fn ImFontAtlas_GetMouseCursorTexData(this: *mut ImFontAtlas, cursor: ImGuiMouseCursor, out_offset: *mut ImVec2, out_size: *mut ImVec2, out_uv_border: *mut ImVec2, out_uv_fill: *mut ImVec2) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlasC1Ev"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}

extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlasD1Ev"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}

impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont { ImFontAtlas_AddFont(self, font_cfg) }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont { ImFontAtlas_AddFontDefault(self, font_cfg) }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(&mut self, filename: *const ::std::os::raw::c_char, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont { ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges) }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(&mut self, font_data: *mut ::std::os::raw::c_void, font_size: ::std::os::raw::c_int, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont { ImFontAtlas_AddFontFromMemoryTTF(self, font_data, font_size, size_pixels, font_cfg, glyph_ranges) }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(&mut self, compressed_font_data: *const ::std::os::raw::c_void, compressed_font_size: ::std::os::raw::c_int, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont { ImFontAtlas_AddFontFromMemoryCompressedTTF(self, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges) }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(&mut self, compressed_font_data_base85: *const ::std::os::raw::c_char, size_pixels: f32, font_cfg: *const ImFontConfig, glyph_ranges: *const ImWchar) -> *mut ImFont { ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges) }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) { ImFontAtlas_ClearInputData(self) }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) { ImFontAtlas_ClearTexData(self) }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) { ImFontAtlas_ClearFonts(self) }
    #[inline]
    pub unsafe fn Clear(&mut self) { ImFontAtlas_Clear(self) }
    #[inline]
    pub unsafe fn Build(&mut self) -> bool { ImFontAtlas_Build(self) }
    #[inline]
    pub unsafe fn GetTexDataAsAlpha8(&mut self, out_pixels: *mut *mut ::std::os::raw::c_uchar, out_width: *mut ::std::os::raw::c_int, out_height: *mut ::std::os::raw::c_int, out_bytes_per_pixel: *mut ::std::os::raw::c_int) { ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel) }
    #[inline]
    pub unsafe fn GetTexDataAsRGBA32(&mut self, out_pixels: *mut *mut ::std::os::raw::c_uchar, out_width: *mut ::std::os::raw::c_int, out_height: *mut ::std::os::raw::c_int, out_bytes_per_pixel: *mut ::std::os::raw::c_int) { ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel) }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesDefault(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesKorean(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesJapanese(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesChineseFull(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesCyrillic(self) }
    #[inline]
    pub unsafe fn GetGlyphRangesThai(&mut self) -> *const ImWchar { ImFontAtlas_GetGlyphRangesThai(self) }
    #[inline]
    pub unsafe fn AddCustomRectRegular(&mut self, id: ::std::os::raw::c_uint, width: ::std::os::raw::c_int, height: ::std::os::raw::c_int) -> ::std::os::raw::c_int { ImFontAtlas_AddCustomRectRegular(self, id, width, height) }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyph(&mut self, font: *mut ImFont, id: ImWchar, width: ::std::os::raw::c_int, height: ::std::os::raw::c_int, advance_x: f32, offset: *const ImVec2) -> ::std::os::raw::c_int { ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset) }
    #[inline]
    pub unsafe fn CalcCustomRectUV(&mut self, rect: *const ImFontAtlas_CustomRect, out_uv_min: *mut ImVec2, out_uv_max: *mut ImVec2) { ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max) }
    #[inline]
    pub unsafe fn GetMouseCursorTexData(&mut self, cursor: ImGuiMouseCursor, out_offset: *mut ImVec2, out_size: *mut ImVec2, out_uv_border: *mut ImVec2, out_uv_fill: *mut ImVec2) -> bool { ImFontAtlas_GetMouseCursorTexData(self, cursor, out_offset, out_size, out_uv_border, out_uv_fill) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImFontAtlas_ImFontAtlas(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) { ImFontAtlas_ImFontAtlas_destructor(self) }
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImFont { pub FontSize: f32, pub Scale: f32, pub DisplayOffset: ImVec2, pub Glyphs: ImVector<ImFontGlyph>, pub IndexAdvanceX: ImVector<f32>, pub IndexLookup: ImVector<::std::os::raw::c_ushort>, pub FallbackGlyph: *const ImFontGlyph, pub FallbackAdvanceX: f32, pub FallbackChar: ImWchar, pub ConfigDataCount: ::std::os::raw::c_short, pub ConfigData: *mut ImFontConfig, pub ContainerAtlas: *mut ImFontAtlas, pub Ascent: f32, pub Descent: f32, pub DirtyLookupTables: bool, pub MetricsTotalSurface: ::std::os::raw::c_int }

#[test]
fn bindgen_test_layout_ImFont() {
    assert_eq!(::std::mem::size_of::<ImFont>(), 112usize, concat!( "Size of: " , stringify ! ( ImFont ) ));
    assert_eq!(::std::mem::align_of::<ImFont>(), 8usize, concat!( "Alignment of " , stringify ! ( ImFont ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).FontSize as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FontSize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).Scale as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Scale ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).DisplayOffset as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( DisplayOffset ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).Glyphs as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Glyphs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).IndexAdvanceX as *const _ as usize }, 32usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( IndexAdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).IndexLookup as *const _ as usize }, 48usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( IndexLookup ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackGlyph as *const _ as usize }, 64usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackGlyph ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackAdvanceX as *const _ as usize }, 72usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackAdvanceX ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackChar as *const _ as usize }, 76usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( FallbackChar ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigDataCount as *const _ as usize }, 78usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ConfigDataCount ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigData as *const _ as usize }, 80usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ConfigData ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).ContainerAtlas as *const _ as usize }, 88usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( ContainerAtlas ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).Ascent as *const _ as usize }, 96usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Ascent ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).Descent as *const _ as usize }, 100usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( Descent ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).DirtyLookupTables as *const _ as usize }, 104usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( DirtyLookupTables ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<ImFont>())).MetricsTotalSurface as *const _ as usize }, 108usize, concat!( "Offset of field: " , stringify ! ( ImFont ) , "::" , stringify ! ( MetricsTotalSurface ) ));
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont15ClearOutputDataEv"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont16BuildLookupTableEv"]
    pub fn ImFont_BuildLookupTable(this: *mut ImFont);
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont9FindGlyphEt"]
    pub fn ImFont_FindGlyph(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont19FindGlyphNoFallbackEt"]
    pub fn ImFont_FindGlyphNoFallback(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont15SetFallbackCharEt"]
    pub fn ImFont_SetFallbackChar(this: *mut ImFont, c: ImWchar);
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_"]
    pub fn ImFont_CalcTextSizeA(this: *const ImFont, size: f32, max_width: f32, wrap_width: f32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, remaining: *mut *const ::std::os::raw::c_char) -> ImVec2;
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f"]
    pub fn ImFont_CalcWordWrapPositionA(this: *const ImFont, scale: f32, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32) -> *const ::std::os::raw::c_char;
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont10RenderCharEP10ImDrawListf6ImVec2jt"]
    pub fn ImFont_RenderChar(this: *const ImFont, draw_list: *mut ImDrawList, size: f32, pos: ImVec2, col: ImU32, c: ::std::os::raw::c_ushort);
}

extern "C" {
    #[link_name = "\u{1}_ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb"]
    pub fn ImFont_RenderText(this: *const ImFont, draw_list: *mut ImDrawList, size: f32, pos: ImVec2, col: ImU32, clip_rect: *const ImVec4, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32, cpu_fine_clip: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont9GrowIndexEi"]
    pub fn ImFont_GrowIndex(this: *mut ImFont, new_size: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont8AddGlyphEtfffffffff"]
    pub fn ImFont_AddGlyph(this: *mut ImFont, c: ImWchar, x0: f32, y0: f32, x1: f32, y1: f32, u0: f32, v0: f32, u1: f32, v1: f32, advance_x: f32);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFont12AddRemapCharEttb"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFontC1Ev"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}

extern "C" {
    #[link_name = "\u{1}_ZN6ImFontD1Ev"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}

impl ImFont {
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) { ImFont_ClearOutputData(self) }
    #[inline]
    pub unsafe fn BuildLookupTable(&mut self) { ImFont_BuildLookupTable(self) }
    #[inline]
    pub unsafe fn FindGlyph(&self, c: ImWchar) -> *const ImFontGlyph { ImFont_FindGlyph(self, c) }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&self, c: ImWchar) -> *const ImFontGlyph { ImFont_FindGlyphNoFallback(self, c) }
    #[inline]
    pub unsafe fn SetFallbackChar(&mut self, c: ImWchar) { ImFont_SetFallbackChar(self, c) }
    #[inline]
    pub unsafe fn CalcTextSizeA(&self, size: f32, max_width: f32, wrap_width: f32, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, remaining: *mut *const ::std::os::raw::c_char) -> ImVec2 { ImFont_CalcTextSizeA(self, size, max_width, wrap_width, text_begin, text_end, remaining) }
    #[inline]
    pub unsafe fn CalcWordWrapPositionA(&self, scale: f32, text: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32) -> *const ::std::os::raw::c_char { ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width) }
    #[inline]
    pub unsafe fn RenderChar(&self, draw_list: *mut ImDrawList, size: f32, pos: ImVec2, col: ImU32, c: ::std::os::raw::c_ushort) { ImFont_RenderChar(self, draw_list, size, pos, col, c) }
    #[inline]
    pub unsafe fn RenderText(&self, draw_list: *mut ImDrawList, size: f32, pos: ImVec2, col: ImU32, clip_rect: *const ImVec4, text_begin: *const ::std::os::raw::c_char, text_end: *const ::std::os::raw::c_char, wrap_width: f32, cpu_fine_clip: bool) { ImFont_RenderText(self, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip) }
    #[inline]
    pub unsafe fn GrowIndex(&mut self, new_size: ::std::os::raw::c_int) { ImFont_GrowIndex(self, new_size) }
    #[inline]
    pub unsafe fn AddGlyph(&mut self, c: ImWchar, x0: f32, y0: f32, x1: f32, y1: f32, u0: f32, v0: f32, u1: f32, v1: f32, advance_x: f32) { ImFont_AddGlyph(self, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x) }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, dst: ImWchar, src: ImWchar, overwrite_dst: bool) { ImFont_AddRemapChar(self, dst, src, overwrite_dst) }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ImFont_ImFont(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) { ImFont_ImFont_destructor(self) }
}

impl RasterizerFlags { pub const NoHinting: RasterizerFlags = RasterizerFlags(1); }

impl RasterizerFlags { pub const NoAutoHint: RasterizerFlags = RasterizerFlags(2); }

impl RasterizerFlags { pub const ForceAutoHint: RasterizerFlags = RasterizerFlags(4); }

impl RasterizerFlags { pub const LightHinting: RasterizerFlags = RasterizerFlags(8); }

impl RasterizerFlags { pub const MonoHinting: RasterizerFlags = RasterizerFlags(16); }

impl RasterizerFlags { pub const Bold: RasterizerFlags = RasterizerFlags(32); }

impl RasterizerFlags { pub const Oblique: RasterizerFlags = RasterizerFlags(64); }

impl ::std::ops::BitOr<RasterizerFlags> for RasterizerFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self { RasterizerFlags(self.0 | other.0) }
}

impl ::std::ops::BitOrAssign for RasterizerFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: RasterizerFlags) { self.0 |= rhs.0; }
}

impl ::std::ops::BitAnd<RasterizerFlags> for RasterizerFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self { RasterizerFlags(self.0 & other.0) }
}

impl ::std::ops::BitAndAssign for RasterizerFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: RasterizerFlags) { self.0 &= rhs.0; }
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct RasterizerFlags(pub u32);

extern "C" {
    #[link_name = "\u{1}_ZN13ImGuiFreeType14BuildFontAtlasEP11ImFontAtlasj"]
    pub fn BuildFontAtlas(atlas: *mut ImFontAtlas, extra_flags: ::std::os::raw::c_uint) -> bool;
}

pub type __builtin_va_list = [__va_list_tag; 1usize];

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct __va_list_tag { pub gp_offset: ::std::os::raw::c_uint, pub fp_offset: ::std::os::raw::c_uint, pub overflow_arg_area: *mut ::std::os::raw::c_void, pub reg_save_area: *mut ::std::os::raw::c_void }

#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>(), 24usize, concat!( "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq!(::std::mem::align_of::<__va_list_tag>(), 8usize, concat!( "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize }, 0usize, concat!( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize }, 4usize, concat!( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize }, 8usize, concat!( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize }, 16usize, concat!( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ));
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct __locale_data { pub _address: u8 }

#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_TextRange_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImGuiTextFilter_TextRange>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImGuiTextFilter_TextRange > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImGuiTextFilter_TextRange>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImGuiTextFilter_TextRange > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_TextRange_close0_instantiation_1() {
    assert_eq!(::std::mem::size_of::<ImVector<ImGuiTextFilter_TextRange>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImGuiTextFilter_TextRange > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImGuiTextFilter_TextRange>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImGuiTextFilter_TextRange > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_char > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_char > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiStorage_Pair_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImGuiStorage_Pair>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImGuiStorage_Pair > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImGuiStorage_Pair>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImGuiStorage_Pair > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawCmd>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawCmd > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawCmd>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawCmd > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawIdx>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawIdx > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawIdx>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawIdx > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation_1() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawCmd>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawCmd > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawCmd>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawCmd > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation_1() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawIdx>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawIdx > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawIdx>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawIdx > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawVert_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawVert>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawVert > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawVert>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawVert > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec4_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImVec4>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImVec4 > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImVec4>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImVec4 > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImTextureID_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImTextureID>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImTextureID > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImTextureID>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImTextureID > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec2_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImVec2>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImVec2 > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImVec2>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImVec2 > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawChannel_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImDrawChannel>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImDrawChannel > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImDrawChannel>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImDrawChannel > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_unsigned_char_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<::std::os::raw::c_uchar>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_uchar > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<::std::os::raw::c_uchar>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_uchar > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImWchar>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImWchar > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImWchar>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImWchar > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImFont_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<*mut ImFont>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < * mut ImFont > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<*mut ImFont>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < * mut ImFont > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontAtlas_CustomRect_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImFontAtlas_CustomRect>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImFontAtlas_CustomRect > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImFontAtlas_CustomRect>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImFontAtlas_CustomRect > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontConfig_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImFontConfig>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImFontConfig > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImFontConfig>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImFontConfig > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontGlyph_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<ImFontGlyph>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < ImFontGlyph > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<ImFontGlyph>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < ImFontGlyph > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<f32>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < f32 > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<f32>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < f32 > ) ));
}

#[test]
fn __bindgen_test_layout_ImVector_open0_unsigned_short_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<ImVector<::std::os::raw::c_ushort>>(), 16usize, concat!( "Size of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_ushort > ) ));
    assert_eq!(::std::mem::align_of::<ImVector<::std::os::raw::c_ushort>>(), 8usize, concat!( "Alignment of template specialization: " , stringify ! ( ImVector < :: std :: os :: raw :: c_ushort > ) ));
}